using System;

namespace AtomicNet
{

    public  class   Composer
    {

        protected   class   ArgumentSpace<T>
        {
            public  static  Undefinable<T>          defaultValue;
        }

        protected   class   InjectionSpace<T>
        {
            public  static  Undefinable<Func<T>>    factoryMethod;
        }

        protected   class   MethodSpace<T>
        {
            public  static  Undefinable<T>          defaultValue;
        }

        public  class   composer
        {
            public  composer    RegisterArgument<T>                                                                             (T argument)                                                                                    { ArgumentSpace<T>                                                                                  .defaultValue   = argument;         return this; }
            public  composer    Register<T>                                                                                     (Func<T> factoryMethod)                                                                         { InjectionSpace<T>                                                                                 .factoryMethod  = factoryMethod;    return this; }
            public  composer    RegisterMethod<TReturn>                                                                         (Func<TReturn> method)                                                                          { MethodSpace<Func<TReturn>>                                                                        .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, TReturn>                                                                     (Func<T1, TReturn> method)                                                                      { MethodSpace<Func<T1, TReturn>>                                                                    .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, TReturn>                                                                 (Func<T1, T2, TReturn> method)                                                                  { MethodSpace<Func<T1, T2, TReturn>>                                                                .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, TReturn>                                                             (Func<T1, T2, T3, TReturn> method)                                                              { MethodSpace<Func<T1, T2, T3, TReturn>>                                                            .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, T4, TReturn>                                                         (Func<T1, T2, T3, T4, TReturn> method)                                                          { MethodSpace<Func<T1, T2, T3, T4, TReturn>>                                                        .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, T4, T5, TReturn>                                                     (Func<T1, T2, T3, T4, T5, TReturn> method)                                                      { MethodSpace<Func<T1, T2, T3, T4, T5, TReturn>>                                                    .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, T4, T5, T6, TReturn>                                                 (Func<T1, T2, T3, T4, T5, T6, TReturn> method)                                                  { MethodSpace<Func<T1, T2, T3, T4, T5, T6, TReturn>>                                                .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, T4, T5, T6, T7, TReturn>                                             (Func<T1, T2, T3, T4, T5, T6, T7, TReturn> method)                                              { MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, TReturn>>                                            .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>                                         (Func<T1, T2, T3, T4, T5, T6, T7, T8, TReturn> method)                                          { MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>>                                        .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>                                     (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> method)                                      { MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>>                                    .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>                                (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> method)                                 { MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>>                               .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>                           (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> method)                            { MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>>                          .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>                      (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> method)                       { MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>>                     .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>                 (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> method)                  { MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>>                .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>            (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> method)             { MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>>           .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>       (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> method)        { MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>>      .defaultValue   = method;           return this; }
            public  composer    RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>  (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> method)   { MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>> .defaultValue   = method;           return this; }
        }

        protected   static
                    readonly    undefined                                                                               undefined   = undefined.value;

        private     static      composer                                                                                instance    = new composer();

        public      static      T                                                                                       InjectArgument<T>                                                                               (T defaultValue)                                                                                        { return ArgumentSpace<T>                                                                                   .defaultValue.GetValueOr(()=>defaultValue);             }
        public      static      T                                                                                       Inject<T>                                                                                       (Func<T> defaultFactoryMethod)                                                                          { return InjectionSpace<T>                                                                                  .factoryMethod.GetValueOr(()=>defaultFactoryMethod)();  }
        public      static      Func<TReturn>                                                                           InjectMethod<TReturn>                                                                           (Func<TReturn> defaultMethod)                                                                           { return MethodSpace<Func<TReturn>>                                                                         .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, TReturn>                                                                       InjectMethod<T1, TReturn>                                                                       (Func<T1, TReturn> defaultMethod)                                                                       { return MethodSpace<Func<T1, TReturn>>                                                                     .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, TReturn>                                                                   InjectMethod<T1, T2, TReturn>                                                                   (Func<T1, T2, TReturn> defaultMethod)                                                                   { return MethodSpace<Func<T1, T2, TReturn>>                                                                 .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, TReturn>                                                               InjectMethod<T1, T2, T3, TReturn>                                                               (Func<T1, T2, T3, TReturn> defaultMethod)                                                               { return MethodSpace<Func<T1, T2, T3, TReturn>>                                                             .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, T4, TReturn>                                                           InjectMethod<T1, T2, T3, T4, TReturn>                                                           (Func<T1, T2, T3, T4, TReturn> defaultMethod)                                                           { return MethodSpace<Func<T1, T2, T3, T4, TReturn>>                                                         .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, T4, T5, TReturn>                                                       InjectMethod<T1, T2, T3, T4, T5, TReturn>                                                       (Func<T1, T2, T3, T4, T5, TReturn> defaultMethod)                                                       { return MethodSpace<Func<T1, T2, T3, T4, T5, TReturn>>                                                     .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, T4, T5, T6, TReturn>                                                   InjectMethod<T1, T2, T3, T4, T5, T6, TReturn>                                                   (Func<T1, T2, T3, T4, T5, T6, TReturn> defaultMethod)                                                   { return MethodSpace<Func<T1, T2, T3, T4, T5, T6, TReturn>>                                                 .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, T4, T5, T6, T7, TReturn>                                               InjectMethod<T1, T2, T3, T4, T5, T6, T7, TReturn>                                               (Func<T1, T2, T3, T4, T5, T6, T7, TReturn> defaultMethod)                                               { return MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, TReturn>>                                             .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>                                           InjectMethod<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>                                           (Func<T1, T2, T3, T4, T5, T6, T7, T8, TReturn> defaultMethod)                                           { return MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>>                                         .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>                                       InjectMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>                                       (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> defaultMethod)                                       { return MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>>                                     .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>                                  InjectMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>                                  (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> defaultMethod)                                  { return MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>>                                .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>                             InjectMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>                             (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> defaultMethod)                             { return MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>>                           .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>                        InjectMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>                        (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> defaultMethod)                        { return MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>>                      .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>                   InjectMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>                   (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> defaultMethod)                   { return MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>>                 .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>              InjectMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>              (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> defaultMethod)              { return MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>>            .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>         InjectMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>         (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> defaultMethod)         { return MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>>       .defaultValue.GetValueOr(()=>defaultMethod);            }
        public      static      Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>    InjectMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>    (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> defaultMethod)    { return MethodSpace<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>>  .defaultValue.GetValueOr(()=>defaultMethod);            }

        public      static      composer                                                                                RegisterArgument<T>                                                                             (T argument)                                                                                            { return Composer.instance.RegisterArgument(argument);  }
        public      static      composer                                                                                Register<T>                                                                                     (Func<T> factoryMethod)                                                                                 { return Composer.instance.Register(factoryMethod);     }
        public      static      composer                                                                                RegisterMethod<TReturn>                                                                         (Func<TReturn> method)                                                                                  { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, TReturn>                                                                     (Func<T1, TReturn> method)                                                                              { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, TReturn>                                                                 (Func<T1, T2, TReturn> method)                                                                          { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, TReturn>                                                             (Func<T1, T2, T3, TReturn> method)                                                                      { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, T4, TReturn>                                                         (Func<T1, T2, T3, T4, TReturn> method)                                                                  { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, T4, T5, TReturn>                                                     (Func<T1, T2, T3, T4, T5, TReturn> method)                                                              { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, T4, T5, T6, TReturn>                                                 (Func<T1, T2, T3, T4, T5, T6, TReturn> method)                                                          { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, T4, T5, T6, T7, TReturn>                                             (Func<T1, T2, T3, T4, T5, T6, T7, TReturn> method)                                                      { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>                                         (Func<T1, T2, T3, T4, T5, T6, T7, T8, TReturn> method)                                                  { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>                                     (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> method)                                              { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>                                (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> method)                                         { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>                           (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> method)                                    { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>                      (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> method)                               { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>                 (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> method)                          { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>            (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> method)                     { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>       (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> method)                { return Composer.instance.RegisterMethod(method);      }
        public      static      composer                                                                                RegisterMethod<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>  (Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> method)           { return Composer.instance.RegisterMethod(method);      }
    }

}