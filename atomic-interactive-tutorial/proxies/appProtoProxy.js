!function()
{"use strict";root.define("atomic.interactiveTutorial.appProxy", function tutorialProtoProxy(localStorage, json)
{
    var examplesKey = "atomic.interactive-tutorials.data.examples";
    function installData(key, data)
    {
        localStorage.setItem(key, json.stringify(data));
    }
    function getData(key, installer)
    {
        if (localStorage.getItem(key) == null)  installData(key, installer());
        return json.parse(localStorage.getItem(key));
    }
    var methods =
    {
        launch:
        function(callback)
        {
            var examples    = getData(examplesKey, getDefaultExamples);
            callback
            ({
                data:
                {
                    examples:   examples
                }
            });
        },
        importExample:
        function(example, callback)
        {
            var exampleSet  = getData(examplesKey, getDefaultExamples);
            exampleSet.examples.push(example);
            installData(examplesKey, exampleSet);
            this.launch(callback);
        },
        saveExamples:
        function(examples, callback)
        {
            installData(examplesKey, examples);
            this.launch(callback);
        },
        resetExamples:
        function(callback)
        {
            installData(examplesKey, getDefaultExamples());
            this.launch(callback);
        }
    };

    function getDefaultExamples()
    {
        var data =
        {
            active:                 "Introduction",
            activeLesson:           0,
            viewEngineModel:        false,
            displayEditors:         true,
            displayAuthorEditors:   false,
            livePreview:            true,
            editorTheme:            "ace/theme/crimson_editor",
            examples:
            [
                {
                    name:       "--Select a tutorial--",
                    example:
                    {
                        placeholder: true,
                    }
                },
                {
                    name:       "Introduction",
                    example:    {"css": "", "javascript":"root.atomic.launch\n(\n    // This is a simple *view adapter* - JavaScript that defines the structure and behavior of your UI\n    {\n        firstName:  { },\n        lastName:   { }\n    },\n    {\n        firstName:  \"Brett\",\n        lastName:   \"Berlington\"\n    }\n);","html":"<!-- This is a *view* - HTML markup that defines the appearance of your UI overall and nothing more -->\n\n<p>First name: <strong>todo</strong></p>\n<p>Last name: <strong>todo</strong></p>","lessons":[{"instructions":"# Welcome!\n\nIn this first tutorial we'll explore the basics of building a user interface with the Model-View-ViewAdapter pattern using AtomicJS.\n\nYou'll see how using this pattern the view is kept unencumbered from any directives or bindings needed to make the user interface work.  Rather the all directives and bindings are defined in the view adapter using a common sense view adapter definition structure.  You'll see how model definitions are kept separate from the view adapter, how the view adapter can bind into the model using observers, and how everything the view remains synchonized with the model by way of the observers dependency tracking.\n\n## Using bindings in the view adapter\n\nIn the bottom-right corner, you've got a view adapter that defines what functional elements should appear in the view.  There is also a model defined containing data about a person.  In the top-right corner, you've got a view that's supposed to display the person data.  Right now it just displays \"_todo_\", so let's fix that.  \n\nModify the two **&lt;strong&gt;** elements in the view, adding id attributes that will connect them to the view adapter.\n\n<pre>\n&lt;p&gt;First Name: &lt;strong <span style=\"background-color: yellow;\">id=\"firstName\"</span>&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;Last Name: &lt;strong <span style=\"background-color: yellow;\">id=\"lastName\"</span>&gt;&lt;/strong&gt;&lt;/p&gt;\n</pre>\n\nNow we also need to change the view adapter to bind to the observer.  Modify the two view adapter controls to bind to the model by adding **bind** properties.\n\n<pre>\n{\n    firstName:  {<span style=\"background-color: yellow;\"> bind: \"firstName\" </span>},\n    lastName:   {<span style=\"background-color: yellow;\"> bind: \"lastName\" </span>}\n}\n</pre>\n\nView elements can be connected to view adapter controls via any css selector, however id attributes are used by default.  The name of the view adapter control is used in a \"#\" css selector when no specific selector has been specified to find an element to connect to.  If no element is found an appropriate element is created based on whether or not type has been specified on the view adapter control.  _(We'll explore this more in the next lesson)_\n\nThe **bind** property of view adapter controls are how AtomicJS let's you associate model properties with properties of those controls.  You'll see more on what other properties can be bound in later lessons and tutorials.\n\n## Running the code\n\nTo run your updated application, either click Run in the nav bar at the top of the screen or check the Live Preview checkbox in the side bar to keep the preview up to date with the markup and code.\n\nAfter you have updated the markup and code appropriately, the UI should display the person's name.\n\nIf everything is working fine, click _Continue_ below.\n\n**Having trouble?** If at any time you find it unclear how to proceed, and your code is working correctly, feel free to click the \"Help - it's not working!\" button below.  This will replace your code and markup with a working copy.\n\n\n\n\n\n\n_<sup>Disclaimer: If you are familiar with the Knockout JS interactive tutorials, some of the text in these lessons may seem plagerized.  This is intentional, as these tutorials are designed to guide users of these types of systems to become familiar with another model based on the principles of unobtrusive javascript.  These tutorials and related playgrounds and other materials were built as proofs of concept that there is another way to build the same types of applications that does not rely on mixing markup and directives in the same structures.</sup>_\n","targetJavascript":"root.atomic.launch\n(\n    // This is a simple *view adapter* - JavaScript that defines the structure and behavior of your UI\n    {\n        firstName:  { bind: \"firstName\" },\n        lastName:   { bind: \"lastName\" }\n    },\n    {\n        firstName:  \"Brett\",\n        lastName:   \"Berlington\"\n    }\n);","targetHTML":"<!-- This is a *view* - HTML markup that defines the appearance of your UI overall and nothing more -->\n\n<p>First name: <strong id=\"firstName\"></strong></p>\n<p>Last name: <strong id=\"lastName\"></strong></p>"},{"instructions":"# Welcome revisited (the no HTML alternative)\n\nIn the previous lesson, you saw the typical way that someone might build a UI that displays a person's first and last name.  There is alternative way to produce the same output without using any HTML at all.  By using _type_ properties on your view adapter controls, you can tell AtomicJS what kinds of controls you want in your view without actually having to specify them.  While this results in UI with minimal formatting, it does allow for rapid creation of user interfaces with a focus solely on JavaScript.  Even better, you can always add the markup later and AtomicJS will connect the view adapter controls to their corresponding elements in the view at that time.\n\nTake a look at the JavaScript in the bottom-right to see another way to build the user interface.  Notice that once again it just displays _\"todo\"_, so let's fix that again.\n\nModify the two **name** controls  in the view adapter adding **bind** properties:\n\n<pre>\n{\n    firstNameField:\n    {\n        controls:\n        {\n            firstNameLabel: { type: \"label\",    value: \"First Name:\" },\n            firstName:      { type: \"readonly\", <span style=\"background-color: yellow;\">bind: \"firstName\" </span> }\n        }\n    },\n    lastNameField:\n    {\n        controls:\n        {\n            lastNameLabel:  { type: \"label\",    value: \"Last Name:\" },\n            lastName:       { type: \"readonly\", <span style=\"background-color: yellow;\">bind: \"lastName\" </span> }\n        }\n    }\n}\n</pre>\n\nAfter you've got the code working move to the next lesson to see how we can add the markup in and control the formatting.\n","targetJavascript":"root.atomic.launch\n(\n    {\n        firstNameField:\n        {\n            controls:\n            {\n                firstNameLabel: { type: \"label\",    value: \"First Name:\" },\n                firstName:      { type: \"readonly\", bind: \"firstName\" }\n            }\n        },\n        lastNameField:\n        {\n            controls:\n            {\n                lastNameLabel:  { type: \"label\",    value: \"Last Name:\" },\n                lastName:       { type: \"readonly\", bind: \"lastName\" }\n            }\n        }\n    },\n    {\n        firstName:  \"Brett\",\n        lastName:   \"Berlington\"\n    }\n)","targetHTML":""},{"instructions":"# Welcome revisited (defining the view after the view adapter)\n\nIn the previous lesson we saw how we can define view adapter controls without actually defining any view markup.  In this lesson we'll continue from the last lesson by adding custom markup to apply specific formatting to make the second example look more like the first example.\n\n## Adding markup to the view\n\nRemember how earlier we saw that the view elements are matched to the view adapter controls by matching the element's **id** to the **name** of the control by default?  Let's use this approach to add elements to the markup that correspond with the controls then.  Add the following markup to the html editor in the top-right:\n\n<pre>\n<span style=\"background-color: yellow;\">&lt;p id=\"firstNameField\"&gt;&lt;span id=\"firstNameLabel\"&gt;First Name:&lt;/span&gt; &lt;strong id=\"firstName\"&gt;&lt;/strong&gt;&lt;/p&gt;</span>\n<span style=\"background-color: yellow;\">&lt;p id=\"lastNameField\"&gt;&lt;span id=\"lastNameLabel\"&gt;Last Name:&lt;/span&gt; &lt;strong id=\"lastName\"&gt;&lt;/strong&gt;&lt;/p&gt;</span>\n</pre>\n\nNow the output should match the look of the example in the first lesson.  This method of constructing the view adapter before the view is just one way that developers can work with AtomicJS.  Most will probably start with the markup and then move to the view adapter definition, and others might go back and forth between the two methods.  There is no wrong way.  For the rest of the examples in this lesson we will focus on defining both the view and the view adapter definition together as we build more interesting interfaces.\n","targetJavascript":"root.atomic.launch\n(\n    {\n        firstNameField:\n        {\n            controls:\n            {\n                firstNameLabel: { type: \"label\",    value: \"First Name:\" },\n                firstName:      { type: \"readonly\", bind: \"firstName\" }\n            }\n        },\n        lastNameField:\n        {\n            controls:\n            {\n                lastNameLabel:  { type: \"label\",    value: \"Last Name:\" },\n                lastName:       { type: \"readonly\", bind: \"lastName\" }\n            }\n        }\n    },\n    {\n        firstName:  \"Brett\",\n        lastName:   \"Berlington\"\n    }\n)","targetHTML":"<p id=\"firstNameField\"><span id=\"firstNameLabel\">First Name:</span> <strong id=\"firstName\"></strong></p>\n<p id=\"lastNameField\"><span id=\"lastNameLabel\">Last Name:</span> <strong id=\"lastName\"></strong></p>"},{"instructions":"# Making the data editable\n\nYou're not limited to displaying static data.  In this example we will add **input** controls with **value** bindings to make the data editable.\n\nAdd the following markup to the bottom of your view (leaving the existing markup in place above it):\n\n<pre>\n&lt;p&gt;First Name: &lt;input id=\"firstNameInput\" /&gt;&lt;/p&gt;\n&lt;p&gt;Last Name: &lt;input id=\"lastNameInput\" /&gt;&lt;/p&gt;\n</pre>\n\nNow we also need to add the following controls to the view adapter by changing the definition:\n\n<pre>\n{\n    firstName:      { bind: \"firstName\" },\n    lastName:       { bind: \"lastName\" }<span style=\"background-color: yellow;\">,\n    firstNameInput: { bind: \"firstName\" },\n    lastNameInput:  { bind: \"lastName\" }</span>\n}\n</pre>\n\nAnd noticed, that worked!  The reason for this is that the model specified as the second argument to the ***root.atomic.launch** method has been bound to the view adapter by way of an intermediary...\n\n## Introducing Observers\n\nWhen you edit one of the text boxes, the control sends the update to the observer with the path in the model graph that the control is bound to and the new value.  The observer updates the underlying model data and then notifies any other listeners (including controls) of the change that have previously read the value at that location in the object graph during a bind operation.  These other listeners/controls can then update their bound properties to reflect the change.  The underlying model is a simple POJO that has no support for performing these kinds of operations which is why AtomicJS has observers.\n\n<sup>Point of comparison: Other library/frameworks such as Knockout have a similar concept known as observables.  Observers are different in that they wrap the entire model instead of defining individual properties on a view model that can be bound to.  This means that all properties in the model can be bound to, including properties that do not yet exist!  We'll see an example of this in a future lesson.</sup>","targetJavascript":"root.atomic.launch\n(\n    // This is a simple *view adapter* - JavaScript that defines the structure and behavior of your UI\n    {\n        firstName:      { bind: \"firstName\" },\n        lastName:       { bind: \"lastName\" },\n        firstNameInput: { bind: \"firstName\" },\n        lastNameInput:  { bind: \"lastName\" }\n    },\n    {\n        firstName:  \"Brett\",\n        lastName:   \"Berlington\"\n    }\n);","targetHTML":"<!-- This is a *view* - HTML markup that defines the appearance of your UI overall and nothing more -->\n\n<p>First name: <strong id=\"firstName\"></strong></p>\n<p>Last name: <strong id=\"lastName\"></strong></p>\n\n<p>First Name: <input id=\"firstNameInput\" /></p>\n<p>Last Name: <input id=\"lastNameInput\" /></p>"},{"instructions":"# Controls with computed values\n\nVery often, you'll want to combine or convert multiple values to make others in various controls.  In this example, we will add a control that displays the _full name_ as a value computed as _first name_ plus a _space_ plus _last name_.\n\nTo handle this Atomic has a concept of **computed bindings** - these are functions defined on the control in place of simple bindings that read one or more model properties via the observer bound to the control.\n\n## Introducing the **.data()** property\n\nAll controls have a _.data_ property that returns the **observer** that has been bound to the view adapter with the root path set to any relative paths in the model graph that parent controls have been bound to _(more on this later)_.  Let's see how this works.\n\nAdd a fullName element and control to your view and view adapters respectively by adding the following markup and changing the code:\n\n<pre>\n&lt;p&gt;Full Name: &lt;strong id=\"fullName\"&gt;&lt;/strong&gt;&lt;/p&gt;\n</pre>\n\n<pre>\n{\n    firstName:      { bind: \"firstName\" },\n    lastName:       { bind: \"lastName\" },\n    firstNameInput: { bind: \"firstName\" },\n    lastNameInput:  { bind: \"lastName\" }<span style=\"background-color: yellow;\">,\n    fullName:       { bind: function(){ return this.data(\"firstName\") + \" \" + this.data(\"lastName\"); } }</span>\n}\n</pre>\n\nIf you look at the updated application now and edit the text boxes, you'll see that all of the controls (including the full name control) stay in sync with the underlying data.\n\n## How does it work?\n\nThings stay in sync because of the observer depdency tracking: the fullName control has a computed function for its **bind** property which computes the full name from the **firstName** and **lastName** which are each bound to input controls.  Changes made to the values of those properties by those input controls are propagated to all of the bound listeners/controls that have read those properties in the object graph via their bound observers.  This operation only notifies those listeners/controls affected by the updates resulting in a minimal set of refreshes to controls needed to bring your UI up-to-date.\n\n","targetJavascript":"root.atomic.launch\n(\n    // This is a simple *view adapter* - JavaScript that defines the structure and behavior of your UI\n    {\n        firstName:      { bind: \"firstName\" },\n        lastName:       { bind: \"lastName\" },\n        firstNameInput: { bind: \"firstName\" },\n        lastNameInput:  { bind: \"lastName\" },\n        fullName:       { bind: function(){ return this.data(\"firstName\") + \" \" + this.data(\"lastName\"); } }\n    },\n    {\n        firstName:  \"Brett\",\n        lastName:   \"Berlington\"\n    }\n);","targetHTML":"<!-- This is a *view* - HTML markup that defines the appearance of your UI overall and nothing more -->\n\n<p>First name: <strong id=\"firstName\"></strong></p>\n<p>Last name: <strong id=\"lastName\"></strong></p>\n\n<p>First Name: <input id=\"firstNameInput\" /></p>\n<p>Last Name: <input id=\"lastNameInput\" /></p>\n\n<p>Full Name: <strong id=\"fullName\"></strong></p>"},{"instructions":"# Adding more behavior\n\nTo finish this example, let's add one final behavior: a button that makes the \"last name\" value turn upper-case.\n\n## Updating the view/view adapter\n\nFirst add a **button** element to the view and a corresponding control to the view adapter:\n\n<pre>\n&lt;button id=\"capitalizeLastNameButton\"&gt;Go caps&lt;/button&gt;\n</pre>\n\n<pre>\n{\n    firstName:                  { bind: \"firstName\" },\n    lastName:                   { bind: \"lastName\" },\n    firstNameInput:             { bind: \"firstName\" },\n    lastNameInput:              { bind: \"lastName\" },\n    fullName:                   { bind: function(){ return this.data(\"firstName\") + \" \" + this.data(\"lastName\"); } }<span style=\"background-color: yellow;\">,\n    capitalizeLastNameButton:   { onclick: function() { this.data(\"lastName\", this.data(\"lastName\").toUpperCase()); } }</span>\n}\n</pre>\n\nNow if you click on the \"Go caps\" button in the updated application , you'll see all relevant parts of the user interface has been updated to match the changed model.\n","targetJavascript":"root.atomic.launch\n(\n    // This is a simple *view adapter* - JavaScript that defines the structure and behavior of your UI\n    {\n        firstName:                  { bind: \"firstName\" },\n        lastName:                   { bind: \"lastName\" },\n        firstNameInput:             { bind: \"firstName\" },\n        lastNameInput:              { bind: \"lastName\" },\n        fullName:                   { bind: function(){ return this.data(\"firstName\") + \" \" + this.data(\"lastName\"); } },\n        capitalizeLastNameButton:   { onclick: function() { this.data(\"lastName\", this.data(\"lastName\").toUpperCase()); } }\n    },\n    {\n        firstName:  \"Brett\",\n        lastName:   \"Berlington\"\n    }\n);","targetHTML":"<!-- This is a *view* - HTML markup that defines the appearance of your UI overall and nothing more -->\n\n<p>First name: <strong id=\"firstName\"></strong></p>\n<p>Last name: <strong id=\"lastName\"></strong></p>\n\n<p>First Name: <input id=\"firstNameInput\" /></p>\n<p>Last Name: <input id=\"lastNameInput\" /></p>\n\n<p>Full Name: <strong id=\"fullName\"></strong></p>\n\n<button id=\"capitalizeLastNameButton\">Go caps</button>"},{"instructions":"# Good job!\n\nThese were very basic examples, but they illustrated some of the key points of MVVA\n\n* You've got a clean, object-oriented representation of all of your data (view oriented or otherwise) in the form of an object graph (your model)\n* You've got a clean, object-oriented representation of your view in the form of a view adapter which encapsulates your UI's behaviors and bindings (your view adapter)\n* Additionally, youve got a declarative definition how your view's structure should be formatted and refined (your view)\n* You can implement abitrarily sophisticated behaviors and bindings just by updating the view adapter object.  You don't have to worry about which DOM elements/attributes need to be changed/added/removed - the library can take care of synchronizing things for you.\n\nSubsequent tutorials will take you further including introducing the final letter in the MVVAC acronym _(Controller)_ and other supporting concepts such as isolating remote service calls to **proxy** objects.\n","targetJavascript":"root.atomic.launch\n(\n    // This is a simple *view adapter* - JavaScript that defines the structure and behavior of your UI\n    {\n        firstName:                  { bind: \"firstName\" },\n        lastName:                   { bind: \"lastName\" },\n        firstNameInput:             { bind: \"firstName\" },\n        lastNameInput:              { bind: \"lastName\" },\n        fullName:                   { bind: function(){ return this.data(\"firstName\") + \" \" + this.data(\"lastName\"); } },\n        capitalizeLastNameButton:   { onclick: function() { this.data(\"lastName\", this.data(\"lastName\").toUpperCase()); } }\n    },\n    {\n        firstName:  \"Brett\",\n        lastName:   \"Berlington\"\n    }\n);","targetHTML":"<!-- This is a *view* - HTML markup that defines the appearance of your UI overall and nothing more -->\n\n<p>First name: <strong id=\"firstName\"></strong></p>\n<p>Last name: <strong id=\"lastName\"></strong></p>\n\n<p>First Name: <input id=\"firstNameInput\" /></p>\n<p>Last Name: <input id=\"lastNameInput\" /></p>\n\n<p>Full Name: <strong id=\"fullName\"></strong></p>\n\n<button id=\"capitalizeLastNameButton\">Go caps</button>","nohelp":true}]}
                },
                {
                    name:       "Working with Lists and Collections",
                    example:    {"css":"table th, table td { padding: 1px; } table th { text-align: left; padding-right: 3em; }","javascript":"root.atomic.launch\n(\n    {\n        seatReservationList:\n        {\n            bind:       \"seats\",\n            getKey:     function(item){ return this.index; },\n            repeat:\n            {\n                seatReservationListItem:\n                {\n                    controls:\n                    {\n                        name:       { bind: \"name\" },\n                        mealName:   { bind: function(){ return this.data(getMealPath(this.data)+\".mealName\"); } },\n                        mealPrice:  { bind: function(){ return this.data(getMealPath(this.data)+\".price\"); } },\n                    }\n                }\n            }\n        }\n    },\n    {\n        availableMeals:\n        [\n            { mealName: \"Standard (sandwhich)\",     price: 0 },\n            { mealName: \"Premium (lobster)\",        price: 34.95 },\n            { mealName: \"Ultimate (whole zebra)\",   price: 290 }\n        ],\n        seats:\n        [\n            { name: \"Steve\",    mealIndex: 0 },\n            { name: \"Brett\",    mealIndex: 0 }\n        ]\n    }\n);\n\nfunction getMealPath(data)\n{\n    return \"...availableMeals.\" + data(\"mealIndex\");\n}\n","html":"<h2>Your seat reservations</h2>\n\n<table id=\"seatReservationList\">\n    <thead><tr>\n        <th>Passenger name</th><th>Meal</th><th>Surcharge</th><th></th>\n    </tr></thead>\n    <tbody>\n        <tr id=\"seatReservationListItem\">\n            <td id=\"name\"></td>\n            <td id=\"mealName\"></td>\n            <td id=\"mealPrice\"></td>\n        </tr>\n    </tbody>\n</table>","lessons":[{"instructions":"# Working with Lists and Collections\n\nVery often, you'll want to generate repeating blocks of controls, especially when displaying lists where the user can add and remove elements.  AtomicJS lets you do that easily, using **observer** wrapped arrays and the **repeater** type control.\n\n## Getting started\n\nIn the next few minutes you will be building a dynamic user interface for reserving seats and meals - this could be one step in an airline booking process.  In the bottom-right pane, you've already got:\n\n* A view adapter with a **seatReservationList** control\n* A model with \n    * an **availableMeals** property containing meal data\n    * a **seats** array property containg an initial collection of seat reservation objects\n\nThe view (top-right pane) and view adapter doesn't yet display the reservation data, so let's fix that.  Populate the **&lt;tbody&gt;** element with the following markup to indicate that you want a table row (**&lt;tr&gt;**) for each reservation:\n\n<pre>\n&lt;tbody&gt;\n    &lt;tr id=\"seatReservationListItem&gt;\n        &lt;td id=\"name\"&gt;&lt;/td&gt;\n        &lt;td id=\"mealName\"&gt;&lt;/td&gt;\n        &lt;td id=\"mealPrice\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/tbody&gt;\n</pre>\n\nNext let's add a function that will be used to resolve the path to the currently selected meal for each seat.  Add the following function to the bottom of the bottom-right pane:\n\n<pre>\nfunction getMealPath(data)\n{\n    return \"...availableMeals.\" + data(\"mealIndex\");\n}\n</pre>\n\nThen change the view adapter definition as follows:\n\n<pre>\n{\n    seatReservationList:\n    {\n<span style=\"background-color: yellow\">        bind:       \"seats\",\n        getKey:     function(item){ return this.index; },\n        repeat:\n        {\n            seatReservationListItem:\n            {\n                controls:\n                {\n                    name:       { bind: \"name\" },\n                    mealName:   { bind: function(){ return this.data(getMealPath(this.data)+\".mealName\"); } },\n                    mealPrice:  { bind: function(){ return this.data(getMealPath(this.data)+\".price\"); } },\n                }\n            }\n        }</span>\n    }\n}\n</pre>\n\nNotice that the **mealIndex** property is used to compute the path to the location of the meal selected for each seat.  Observers work on the concept of locating nodes in the object graph and either returning or changing the value of the node.  We can use computed paths to bind to properties located in another branch of the object graph.\n\nThe result?  If you view the updated application, you should see a simple table of seat reservation information.\n\nThe **getKey** property function is used to generate a unique key for each repeated control template instance.  This is used to check for differential changes which allow for efficient removal/addition/updating of template control instances.\n\nThe **repeat** property is a control specific directive unique to the **repeater** control.  Notice the **seatReservationListItem** property defined within the **repeat** object.  This represents one control template that may be repeated by a repeater control.  Repeater controls may contain one or more of these control templates and can weave them together in a repeating fashion.  There is also a template property function (**skipItem**) that can be used to skip outputting an instance of each template to the interface (*we'll cover that in another tutorial*).\n\n","targetJavascript":"root.atomic.launch\n(\n    {\n        seatReservationList:\n        {\n            bind:       \"seats\",\n            getKey:     function(item){ return this.index; },\n            repeat:\n            {\n                seatReservationListItem:\n                {\n                    controls:\n                    {\n                        name:       { bind: \"name\" },\n                        mealName:   { bind: function(){ return this.data(getMealPath(this.data)+\".mealName\"); } },\n                        mealPrice:  { bind: function(){ return this.data(getMealPath(this.data)+\".price\"); } },\n                    }\n                }\n            }\n        }\n    },\n    {\n        availableMeals:\n        [\n            { mealName: \"Standard (sandwhich)\",     price: 0 },\n            { mealName: \"Premium (lobster)\",        price: 34.95 },\n            { mealName: \"Ultimate (whole zebra)\",   price: 290 }\n        ],\n        seats:\n        [\n            { name: \"Steve\",    mealIndex: 0 },\n            { name: \"Brett\",    mealIndex: 0 }\n        ]\n    }\n);\n\nfunction getMealPath(data)\n{\n    return \"...availableMeals.\" + data(\"mealIndex\");\n}\n","targetHTML":"<h2>Your seat reservations</h2>\n\n<table id=\"seatReservationList\">\n    <thead><tr>\n        <th>Passenger name</th><th>Meal</th><th>Surcharge</th><th></th>\n    </tr></thead>\n    <tbody>\n        <tr id=\"seatReservationListItem\">\n            <td id=\"name\"></td>\n            <td id=\"mealName\"></td>\n            <td id=\"mealPrice\"></td>\n        </tr>\n    </tbody>\n</table>"},{"instructions":"# Adding items\n\nFollowing the MVVA pattern makes it very simple to work with changeable object graphs such as arrays and hierarchies.  You update the underlying data and the user interface automatically updates in sync.\n\n## Adding seat reservations\n\nAdd a button to your view and view adapter using the **onclick** event to define an even handler by modifying the view and view adapter respectively as follows:\n\n<pre>\n&lt;button id=\"addSeatReservationButton\"&gt;Reserve another seat&lt;/button&gt;\n</pre>\n\n<pre>\n{\n    seatReservationList:\n    {\n        bind:       \"seats\",\n        getKey:     function(item){ return this.index; },\n        repeat:\n        {\n            seatReservationListItem:\n            {\n                controls:\n                {\n                    name:       { bind: \"name\" },\n                    mealName:   { bind: function(){ return this.data(getMealPath(this.data)+\".mealName\"); } },\n                    mealPrice:  { bind: function(){ return this.data(getMealPath(this.data)+\".price\"); } },\n                }\n            }\n        }\n    }<span style=\"background-color: yellow\">,\n    addSeatReservationButton:\n    {\n        onclick:\n        function()\n        {\n            this.data(\"seats\").push({name: \"\", mealIndex: 0});\n        }\n    }</span>\n}\n</pre>\n\nNotice that in the onclick function we are adding a new seat reservation object to the **seats** array in the model.  When you run the updated application and click on the **Reserve another seat** button, the user interface updates to match.  This is because the **seatReservationList** **repeater** control is bound to the **seats.length** path which is updated when the new item is pushed into the array.  This causes the repeater control to add a new **seatReservationListItem** control which in turn is bound to the path of the new item in the **seats** array.\n\nNote that adding a row does _not_ involve regenerating the entire user interface nor the entire table.  For effeciency, AtomicJS tracks what has changed in the model and performs a minimal set of view structure updates to match.  This means that you can scale up to very large or sophisticated user interfaces and it can remain snappy and responsive even on low-end mobile devices.\n","targetJavascript":"root.atomic.launch\n(\n    {\n        seatReservationList:\n        {\n            bind:       \"seats\",\n            getKey:     function(item){ return this.index; },\n            repeat:\n            {\n                seatReservationListItem:\n                {\n                    controls:\n                    {\n                        name:       { bind: \"name\" },\n                        mealName:   { bind: function(){ return this.data(getMealPath(this.data)+\".mealName\"); } },\n                        mealPrice:  { bind: function(){ return this.data(getMealPath(this.data)+\".price\"); } },\n                    }\n                }\n            }\n        },\n        addSeatReservationButton:\n        {\n            onclick:\n            function()\n            {\n                this.data(\"seats\").push({ name: \"\", mealIndex: 0 });\n            }\n        }\n    },\n    {\n        availableMeals:\n        [\n            { mealName: \"Standard (sandwhich)\",     price: 0 },\n            { mealName: \"Premium (lobster)\",        price: 34.95 },\n            { mealName: \"Ultimate (whole zebra)\",   price: 290 }\n        ],\n        seats:\n        [\n            { name: \"Steve\",    mealIndex: 0 },\n            { name: \"Brett\",    mealIndex: 0 }\n        ]\n    }\n);\n\nfunction getMealPath(data)\n{\n    return \"...availableMeals.\" + data(\"mealIndex\");\n}\n","targetHTML":"<h2>Your seat reservations</h2>\n\n<table id=\"seatReservationList\">\n    <thead><tr>\n        <th>Passenger name</th><th>Meal</th><th>Surcharge</th><th></th>\n    </tr></thead>\n    <tbody>\n        <tr id=\"seatReservationListItem\">\n            <td id=\"name\"></td>\n            <td id=\"mealName\"></td>\n            <td id=\"mealPrice\"></td>\n        </tr>\n    </tbody>\n</table>\n<button id=\"addSeatReservationButton\">Reserve another seat</button>"},{"instructions":"# Making the data editable\n\nYou can use any control within **repeater** template controls just the same as anywhere else, so it's pretty easy to upgrade what we've got into a full data editor.  Update your view and view adapter:\n\n<pre>\n&lt;tbody&gt;\n    &lt;tr id=\"seatReservationListItem&gt;\n        &lt;td<span style=\"background-color: yellow; text-decoration: line-through; color: red\"> id=\"name\"</span>&gt;<span style=\"background-color: yellow;\">&lt;input id=\"name\" /&gt;</span>&lt;/td&gt;\n        &lt;td<span style=\"background-color: yellow; text-decoration: line-through; color: red\"> id=\"mealName\"</span>&gt;<span style=\"background-color: yellow;\">&lt;select id=\"meal\"&gt;&lt;/select&gt;</span>&lt;/td&gt;\n        &lt;td id=\"mealPrice\"&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/tbody&gt;\n</pre>\n\n<pre>\n{\n    seatReservationList:\n    {\n        bind:       \"seats\",\n        getKey:     function(item){ return this.index; },\n        repeat:\n        {\n            seatReservationListItem:\n            {\n                controls:\n                {\n                    name:       { bind: \"name\" },\n                    <span style=\"background-color: yellow\">meal:       { bind: { value: \"mealIndex\", items: { to: \"...availableMeals\", text: \"mealName\", value: function(item){ return item(\"...availableMeals\").indexOf(item()); } } } },</span>\n                    mealPrice:  { bind: function(){ return this.data(getMealPath(this.data)+\".price\"); } },\n                }\n            }\n        }\n    },\n    addSeatReservationButton:\n    {\n        onclick:\n        function()\n        {\n            this.data(\"seats\").push({name: \"\", mealIndex: 0});\n        }\n    }\n}\n</pre>\n\nThis code uses two new binding sub properties on the **meal** control, **value** and **items**.  The **value** subbinding property is the default property that is used when the **bind** property is defined by itself with a _string literal_ or _function_.  The **items** property is used to bind a path in the model as the _source_ of lookup data for controls that provide multiple values to select from such as the **select**, **radiogroup** and **multiselect** controls.  The **items** subbinding property itself can be defined with a _string literal_ or _function_ or it can have sub properties of its own that define the source path (**to**), in addition to the _text_ (**text**) and _value_ (**value**) paths of each option item in the source array.\n\nIn this example the **to** sub property is set to **\"...availableMeals\"**, the **text** sub property is set to **mealName** and the **value** sub property is set to a function that computes the index of the option in the array. _Note the use of the special path token \"**...**\" which resets the path to the root of the model's object graph_.\n\n## Formatting prices\n\nWe've got a nice object-oriented definition of our view adapter, so we can trivially add binding compute functions for any binding in any control.  Let's update the binding compute function bound to the value property of the mealPrice control to format the price of the meal that the row is bound to:\n\n<pre>\n{\n    seatReservationList:\n    {\n        bind:       \"seats\",\n        getKey:     function(item){ return this.index; },\n        repeat:\n        {\n            seatReservationListItem:\n            {\n                controls:\n                {\n                    name:       { bind: \"name\" },\n                    meal:       { bind: { value: \"mealIndex\", items: { to: \"...availableMeals\", text: \"mealName\", value: function(item){ return item(\"...availableMeals\").indexOf(item()); } } } },\n                    mealPrice:  { bind: function(){ <span style=\"background-color: yellow\">var price = this.data(getMealPath(this.data)+\".price\"); return price ? \"$\" + price.toFixed(2) : \"None\"; } },</span>\n                }\n            }\n        }\n    },\n    addSeatReservationButton:\n    {\n        onclick:\n        function()\n        {\n            this.data(\"seats\").push({name: \"\", mealIndex: 0});\n        }\n    }\n}\n</pre>\n\nTry out the updated application.\n","targetJavascript":"root.atomic.launch\n(\n    {\n        seatReservationList:\n        {\n            bind:       \"seats\",\n            getKey:     function(item){ return this.index; },\n            repeat:\n            {\n                seatReservationListItem:\n                {\n                    controls:\n                    {\n                        name:       { bind: \"name\" },\n                        meal:       { bind: { value: \"mealIndex\", items: { to: \"...availableMeals\", text: \"mealName\", value: function(item){ return item(\"...availableMeals\").indexOf(item()); } } } },\n                        mealPrice:  { bind: function(){ var price = this.data(getMealPath(this.data)+\".price\"); return price ? \"$\" + price.toFixed(2) : \"None\"; } },\n                    }\n                }\n            }\n        },\n        addSeatReservationButton:\n        {\n            onclick:\n            function()\n            {\n                this.data(\"seats\").push({ name: \"\", mealIndex: 0 });\n            }\n        }\n    },\n    {\n        availableMeals:\n        [\n            { mealName: \"Standard (sandwhich)\",     price: 0 },\n            { mealName: \"Premium (lobster)\",        price: 34.95 },\n            { mealName: \"Ultimate (whole zebra)\",   price: 290 }\n        ],\n        seats:\n        [\n            { name: \"Steve\",    mealIndex: 0 },\n            { name: \"Brett\",    mealIndex: 0 }\n        ]\n    }\n);\n\nfunction getMealPath(data)\n{\n    return \"...availableMeals.\" + data(\"mealIndex\");\n}\n","targetHTML":"<h2>Your seat reservations</h2>\n\n<table id=\"seatReservationList\">\n    <thead><tr>\n        <th>Passenger name</th><th>Meal</th><th>Surcharge</th><th></th>\n    </tr></thead>\n    <tbody>\n        <tr id=\"seatReservationListItem\">\n            <td><input id=\"name\" /></td>\n            <td><select id=\"meal\"></select></td>\n            <td id=\"mealPrice\"></td>\n        </tr>\n    </tbody>\n</table>\n<button id=\"addSeatReservationButton\">Reserve another seat</button>"},{"instructions":"# Removing items and showing a total surcharge\n\nSince you can add items, you should be able to remove them too, right?  As you'd expect, this is merely a matter of updating the underlying data.\n\nUpdate your view and view adapter so that it displays a \"remove\" link next to each item:\n\n<pre>\n&lt;tbody&gt;\n    &lt;tr id=\"seatReservationListItem&gt;\n        &lt;td&gt;&lt;input id=\"name\" /&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;select id=\"meal\"&gt;&lt;/select&gt;&lt;/td&gt;\n        &lt;td id=\"mealPrice\"&gt;&lt;/td&gt;\n        <span style=\"background-color: yellow;\">&lt;td&gt;&lt;a id=\"removeSeat\"&gt;Remove&lt;/a&gt;&lt;/td&gt;</span>\n    &lt;/tr&gt;\n&lt;/tbody&gt;\n</pre>\n\n<pre>\n{\n    seatReservationList:\n    {\n        bind:       \"seats\",\n        getKey:     function(item){ return this.index; },\n        repeat:\n        {\n            seatReservationListItem:\n            {\n                controls:\n                {\n                    name:       { bind: \"name\" },\n                    meal:       { bind: { value: \"mealIndex\", items: { to: \"...availableMeals\", text: \"mealName\", value: function(item){ return item(\"...availableMeals\").indexOf(item()); } } } },\n                    mealPrice:  { bind: function(){ var price = this.data(getMealPath(this.data)+\".price\"); return price ? \"$\" + price.toFixed(2) : \"None\"; } }<span style=\"background-color: yellow\">,\n                    removeSeat: { onclick: function(){ this.data(\"...seats\").remove(this.data()); } }</span>\n                }\n            }\n        }\n    },\n    addSeatReservationButton:\n    {\n        onclick:\n        function()\n        {\n            this.data(\"seats\").push({ name: \"\", mealIndex: 0 });\n        }\n    }\n}\n</pre>\n\nNow if you run the updated application, you'll be able to remove items as well as add them.\n\n## Displaying a total surcharge\n\nIt would be nice to let the custom know what they will be paying, right?  As expected, we can add a control that will display the total via a binding function, and let the library take care of knowing when to recalulate and refresh the control.\n\nFirst let's add a function that will compute the total cost across all seat reservatons:\n\n<pre>\n    if (data(\"...seats\")===undefined) return 0;\n    var total   = 0; \n    for(var counter=0;counter&lt;data(\"...seats\").count;counter++)  total   += data(getMealPath(data(\"...seats.\"+counter))+\".price\");\n    return total;\n</pre>\n\nThen add the following elements and controls to the view and view adapter after the **addSeatReservationButton** element and control respectively:\n\n<pre>\n&lt;h3 id=\"totalSurchargeSection\"&gt;\n    Total surcharge: $&lt;span id=\"grandTotal\"&gt;&lt;/span&gt;\n&lt;/h3&gt;\n</pre>\n\n<pre>\ntotalSurchargeSection:\n{\n    bind:       { display: function(){ return getTotalSurcharge(this.data) > 0; } },\n    controls:\n    {\n        grandTotal: { bind: function(){ return getTotalSurcharge(this.data).toFixed(2); } }\n    }\n}\n</pre>\n\nThe new code demonstrates a new point:\n* The **visible** binding property makes a control visible or invisible as your data changes (internally, it modifies the element's CSS **display** style).  In this case, we choose to show the \"total surcharge\" section control only if the total surcharge is greater than zero.\n\nNow if you run the updated application, you'll see the \"total surcharge\" section appear and disappear as appropriate, and thanks to dependency tracking, it knows when to recalculate its own value - you don't need to put any code in your \"add\" or \"remove\" functions to force depdencies to update manually.\n","targetJavascript":"root.atomic.launch\n(\n    {\n        seatReservationList:\n        {\n            bind:       \"seats\",\n            getKey:     function(item){ return this.index; },\n            repeat:\n            {\n                seatReservationListItem:\n                {\n                    controls:\n                    {\n                        name:       { bind: \"name\" },\n                        meal:       { bind: { value: \"mealIndex\", items: { to: \"...availableMeals\", text: \"mealName\", value: function(item){ return item(\"...availableMeals\").indexOf(item()); } } } },\n                        mealPrice:  { bind: function(){ var price = this.data(getMealPath(this.data)+\".price\"); return price ? \"$\" + price.toFixed(2) : \"None\"; } },\n                        removeSeat: { onclick: function(){ this.data(\"...seats\").remove(this.data()); } }\n                    }\n                }\n            }\n        },\n        addSeatReservationButton:\n        {\n            onclick:\n            function()\n            {\n                this.data(\"seats\").push({ name: \"\", mealIndex: 0 });\n            }\n        },\n        totalSurchargeSection:\n        {\n            bind:       { display: function(){ return getTotalSurcharge(this.data) > 0; } },\n            controls:\n            {\n                grandTotal: { bind: function(){ return getTotalSurcharge(this.data).toFixed(2); } }\n            }\n        }\n    },\n    {\n        availableMeals:\n        [\n            { mealName: \"Standard (sandwhich)\",     price: 0 },\n            { mealName: \"Premium (lobster)\",        price: 34.95 },\n            { mealName: \"Ultimate (whole zebra)\",   price: 290 }\n        ],\n        seats:\n        [\n            { name: \"Steve\",    mealIndex: 0 },\n            { name: \"Brett\",    mealIndex: 0 }\n        ]\n    }\n);\n\nfunction getMealPath(data)\n{\n    return \"...availableMeals.\" + data(\"mealIndex\");\n}\nfunction getTotalSurcharge(data)\n{\n    if (data(\"...seats\")===undefined) return 0;\n    var total   = 0; \n    for(var counter=0;counter<data(\"...seats\").count;counter++)  total   += data(getMealPath(data(\"...seats.\"+counter))+\".price\");\n    return total;\n}","targetHTML":"<h2>Your seat reservations</h2>\n\n<table id=\"seatReservationList\">\n    <thead><tr>\n        <th>Passenger name</th><th>Meal</th><th>Surcharge</th><th></th>\n    </tr></thead>\n    <tbody>\n        <tr id=\"seatReservationListItem\">\n            <td><input id=\"name\" /></td>\n            <td><select id=\"meal\"></select></td>\n            <td id=\"mealPrice\"></td>\n            <td><a id=\"removeSeat\">Remove</a></td>\n        </tr>\n    </tbody>\n</table>\n<button id=\"addSeatReservationButton\">Reserve another seat</button>\n<h3 id=\"totalSurchargeSection\">\n    Total surcharge: $<span id=\"grandTotal\"></span>\n</h3>"},{"instructions":"# Final niceties\n\nHaving followed the MVVA pattern and got an object oriented definition of the user interfaces behaviors along with an object oriented definition of the data, you're in a great position to sprinkle on extra behaviors in a very natural and convenient way.\n\nFor example, if you're asked to display the total number of seats being reserved, you can implement that in just a single place by adding a seat count control and you _don't_ have to write any extra code to make the seat count update when you add or remove seats.  Just make the following changes to the view and view adapter:\n\n<pre>\n&lt;h2&gt;Your seat reservations<span style=\"background-color: yellow\"> (&lt;span class=\"seatCount\"&gt;&lt;/span&gt;)</span>&lt;/h2&gt;\n...\n&lt;h3 id=\"totalSurchargeSection\"&gt;\n    Total surcharge<span style=\"background-color: yellow\"> for meals (&lt;span class=\"seatCount\"&gt;&lt;/span&gt;)</span>: $&lt;span id=\"grandTotal\"&gt;&lt;/span&gt;\n&lt;/h3&gt;\n</pre>\n\n<pre>\nseatCount:\n{\n    selector:   \".seatCount\",\n    bind:       \"seats.length\"\n}\n</pre>\n\nTrivial.\n\nThis new code also demonstrates a new point:\n* The **selector** control property is an alternate way to locate the elements in the view to connect the view adapter control to.  In this case, we are connecting the control to all elements who have a class of \"seatCount\" _when the view is attached_.  Certain controls that are output only controls are able to be represented multiple times in the view.  This is if you run the updated application, you will see the seat count appear in both the \"Your seat reservations\" header and the \"Total surcharge for meals\" header.\n\nSimilarly, if you're asked to put a limit on the number of seats one can reserve, you can make the user interface represent that by using the **enable** binding property:\n\n<pre>\naddSeatReservationButton:\n{\n    <span style=\"background-color: yellow\">bind:       { enabled: { when: \"seats.length\", \"<\": 5 } },</span>\n    onclick:\n    function()\n    {\n        this.data(\"seats\").push({ name: \"\", mealIndex: 0 });\n    }\n},\n</pre>\n\nThe button becomes disabled when the seat limit is reached.  You don't have to write any code to re-enable it when the user removes some seats (cluttering up your \"remove\" logic), because the expression will automatically be re-evaluated by AtomicJS when the associated data changes.\n\nThis code also demonstrates two new points:\n* The **enabled** bind property makes a control enabled or disabled as your data changes.  Alternatively, there is also a **disabled** bind property if that makes more sense in the context of certain controls which behaves in the opposite way.\n* The **when** bind sub property is an alternate way of defining conditional criteria for a model value.  The **when** sub property may be used alone, in which case the property specified is treated as a boolean value, or it may be used in conjunction with any of the following _operation_ bind sub properties _[ **\"==\"**, **\"!=\"**, **\"<\"**, **\"<=\"**, **\">\"**, **\">=\"**]_\n\nIf you'd like to learn the ways of saving the updated data back to the server, see the _Loading and Saving Data_ tutorial _(coming soon)_.\n","targetJavascript":"root.atomic.launch\n(\n    {\n        seatReservationList:\n        {\n            bind:       \"seats\",\n            getKey:     function(item){ return this.index; },\n            repeat:\n            {\n                seatReservationListItem:\n                {\n                    controls:\n                    {\n                        name:       { bind: \"name\" },\n                        meal:       { bind: { value: \"mealIndex\", items: { to: \"...availableMeals\", text: \"mealName\", value: function(item){ return item(\"...availableMeals\").indexOf(item()); } } } },\n                        mealPrice:  { bind: function(){ var price = this.data(getMealPath(this.data)+\".price\"); return price ? \"$\" + price.toFixed(2) : \"None\"; } },\n                        removeSeat: { onclick: function(){ this.data(\"...seats\").remove(this.data()); } }\n                    }\n                }\n            }\n        },\n        addSeatReservationButton:\n        {\n            bind:       { enabled: { when: \"seats.length\", \"<\": 5 } },\n            onclick:\n            function()\n            {\n                this.data(\"seats\").push({ name: \"\", mealIndex: 0 });\n            }\n        },\n        totalSurchargeSection:\n        {\n            bind:       { display: function(){ return getTotalSurcharge(this.data) > 0; } },\n            controls:\n            {\n                grandTotal: { bind: function(){ return getTotalSurcharge(this.data).toFixed(2); } }\n            }\n        },\n        seatCount:\n        {\n            selector:   \".seatCount\",\n            bind:       \"seats.length\"\n        }\n    },\n    {\n        availableMeals:\n        [\n            { mealName: \"Standard (sandwhich)\",     price: 0 },\n            { mealName: \"Premium (lobster)\",        price: 34.95 },\n            { mealName: \"Ultimate (whole zebra)\",   price: 290 }\n        ],\n        seats:\n        [\n            { name: \"Steve\",    mealIndex: 0 },\n            { name: \"Brett\",    mealIndex: 0 }\n        ]\n    }\n);\n\nfunction getMealPath(data)\n{\n    return \"...availableMeals.\" + data(\"mealIndex\");\n}\nfunction getTotalSurcharge(data)\n{\n    if (data(\"...seats\")===undefined) return 0;\n    var total   = 0; \n    for(var counter=0;counter<data(\"...seats\").count;counter++)  total   += data(getMealPath(data(\"...seats.\"+counter))+\".price\");\n    return total;\n}","targetHTML":"<h2>Your seat reservations (<span class=\"seatCount\"></span>)</h2>\n\n<table id=\"seatReservationList\">\n    <thead><tr>\n        <th>Passenger name</th><th>Meal</th><th>Surcharge</th><th></th>\n    </tr></thead>\n    <tbody>\n        <tr id=\"seatReservationListItem\">\n            <td><input id=\"name\" /></td>\n            <td><select id=\"meal\"></select></td>\n            <td id=\"mealPrice\"></td>\n            <td><a id=\"removeSeat\">Remove</a></td>\n        </tr>\n    </tbody>\n</table>\n<button id=\"addSeatReservationButton\">Reserve another seat</button>\n<h3 id=\"totalSurchargeSection\">\n    Total surcharge for meals (<span class=\"seatCount\"></span>): $<span id=\"grandTotal\"></span>\n</h3>"}]}
                },
                {
                    name:       "Single Page Applications",
                    example:    {"css":"body { font-family: Helvetica, Arial}\n.folders { background-color: #bbb; list-style-type: none; padding: 0; margin: 0; border-radius: 7px; \n\tbackground-image: -webkit-gradient(linear, left top, left bottom, color-stop(0, #d6d6d6), color-stop(0.4, #c0c0c0), color-stop(1,#a4a4a4)); \n\tmargin: 10px 0 16px 0;\n\tfont-size: 0px;\n}\n.folders li:hover { background-color: #ddd; }    \n.folders li:first-child { border-left: none; border-radius: 7px 0 0 7px; }\n.folders li { font-size: 16px; font-weight: bold; display: inline-block; padding: 0.5em 1.5em; cursor: pointer; color: #444; text-shadow: #f7f7f7 0 1px 1px; border-left: 1px solid #ddd; border-right: 1px solid #888; }\n.folders li { *display: inline !important; } /* IE7 only */\n.folders .selected { background-color: #444 !important; color: white; text-shadow:none; border-right-color: #aaa; border-left: none; box-shadow:inset 1px 2px 6px #070707; }    \n\n.mails { width: 100%; table-layout:fixed; border-spacing: 0; }\n.mails thead { background-color: #bbb; font-weight: bold; color: #444; text-shadow: #f7f7f7 0 1px 1px; }\n.mails tbody tr:hover { cursor: pointer; background-color: #68c !important; color: White; }\n.mails th, .mails td { text-align:left; padding: 0.4em 0.3em; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }\n.mails th { border-left: 1px solid #ddd; border-right: 1px solid #888; padding: 0.4em 0 0.3em 0.7em; }    \n.mails th:nth-child(1), .mails td:nth-child(1) { width: 20%; }\n.mails th:nth-child(2), .mails td:nth-child(2) { width: 15%; }\n.mails th:nth-child(3), .mails td:nth-child(3) { width: 45%; }\n.mails th:nth-child(4), .mails td:nth-child(4) { width: 15%; }\n.mails th:last-child { border-right: none }\n.mails tr:nth-child(even) { background-color: #EEE; }\n  \n.viewMail .mailInfo { background-color: #dae0e8; padding: 1em 1em 0.5em 1.25em; border-radius: 1em; }\n.viewMail .mailInfo h1 { margin-top: 0.2em; font-size: 130%; }\n.viewMail .mailInfo label { color: #777; font-weight: bold; min-width: 2.75em; text-align:right; display: inline-block; }\n.viewMail .message { padding: 0 1.25em; }","javascript":"root.atomic.launch\n(\n    {\n        /* Todo: Create View Adapter */\n    },\n    {\n        folders: [\"Inbox\", \"Archive\", \"Sent\", \"Spam\"]\n    }\n)","html":"<!-- Todo: Create View -->","lessons":[{"instructions":"# Single page applications\n\nMany of the most modern, responsive, and engaging web-based user interfaces have gone beyond tradition Ajax and have become _single page applciations_: the visitor can seemingly navigate within a single page at the speed of a native application.  The best-known example is probably GMail, but these days it's an increasingly widespread technique.\n\nSuch applications use **hash-based** or **pushState navigation** to support back/forward gestures and bookmarking.  The functionality to support such state management are outside of the scope of AtomicJS but there are other libraries that do a great job of providing this.  One such library is [Path.js](http://mtrpcic.net/pathjs/).  This library plays well with AtomicJS and can easily be incorporated into your applications.\n\n## Example: Building a webmail client\n\nYou've got a simple model that currently just holds a list of folders.  Your first job is to display those folders on the screen, and to make them selectable.\n\nYou can use a **repeater** control to display those folders as a list.  Add the following to your view and view adapter:\n\n<pre>\n&lt;ul id=\"folderList\"&gt;\n    &lt;li id=\"folderListItem\"&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n\n<pre>\nfolderList:\n{\n    bind:   \"folders\",\n    repeat:\n    {\n        folderListItem:\n        {\n            getKey: function(item){ return \"folder-\" + item(); },\n            bind:   \"\"\n        }\n    }\n}\n</pre>\n\nIf you run the updated application, you should see a bullet-pointed list.  That's nice and semantic, but not very attractive.  Improve the styling by adding the folders class to your **&lt;ul&gt;**:\n\n<pre>\n&lt;ul id=\"folderList\"<span style=\"background-color: yellow;\"> class=\"folders\"</span>&gt;\n</pre>\n\nThat makes it look much better.\n\n# Making the folders selectable\n\nBecause this is MVVA, we'll represent navigation position using a model property.  That will make hash-based navigation very easy later.  Modify the **folderListItem** control by adding a **classes** bind property and a click event to set a **chosenFolderId** property at the root of the model:\n\n<pre>\nfolderListItem:\n{\n    getKey:     function(item){ return \"folder-\" + item(); },\n    bind:       <span style=\"background-color: yellow; text-decoration: line-through; color: red;\">\"\"</span><span style=\"background-color: yellow;\">{ value: \"\", classes: { selected: function(item){ return item() == item(\"...chosenFolderId\"); } } },\n    onclick:    function() { this.data(\"...chosenFolderId\", this.data());}</span>\n}\n</pre>\n\nThis new code demonstrates a new point:\n* Properties do not need to exist in the model before a subscriber can start listening for them via the **observer**!  Notice that we are observing the **chosenFolderId** property from the root of the model before it is ever assigned or defined, yet when the value first gets assigned to it in the click event handler, the class bindings work as if the property was defined all along.  This is thanks to the fact that bindings are path based and not based on references to instances of _observables_ typically found in other libraries or frameworks.\n\nTry it - you should now see folders become highlighted when you click on them.","targetJavascript":"root.atomic.launch\n(\n    {\n        folderList:\n        {\n            bind:   \"folders\",\n            repeat:\n            {\n                folderListItem:\n                {\n                    getKey:     function(item){ return \"folder-\" + item(); },\n                    bind:       { value: \"\", classes: { selected: function(item){ return item() == item(\"...chosenFolderId\"); } } },\n                    onclick:    function() { this.data(\"...chosenFolderId\", this.data());}\n                }\n            }\n        }\n    },\n    {\n        folders: [\"Inbox\", \"Archive\", \"Sent\", \"Spam\"]\n    }\n)","targetHTML":"<ul id=\"folderList\" class=\"folders\">\n    <li id=\"folderListItem\"></li>\n</ul>"},{"instructions":"# Upgrading to a more structured application code base\n\nThis application is about to get a bit more sophisticated.  Before we continue let's evolve our code base into something more organized with functionality that is more properly separated.\n\n## Introducing MVVAC - The Controller\n\nTypically, when it's time to start introducing application flow behaviors where remote data sources and data persistence are involved, it's generally a good idea to put some common sense structures in place.  One of these structures in the **Controller**.  Controllers are classes that are responsible for listening for major events from the view adapter and performing some action based on those events.  Additionally, controllers are responsible for updating the model with new data sourced from outside of the view adapter.  Since AtomicJS is built upon the idea of following SOLID principles and other related best practices, let's upgrade our application follow suit.\n\nAlter the JavaScript in the bottom-right pane to the following:\n<pre>\n!function()\n{\"use strict\";root.define(\"atomic.singlePageApplicationTutorial.appView\", function()\n{return function singlePageAppView(viewAdapter)\n{\n    var adapterDefinition   =\n    {\n        controls:\n        {\n            folderList:\n            {\n                bind:   \"folders\",\n                repeat:\n                {\n                    folderListItem:\n                    {\n                        getKey:     function(item){ return \"folder-\" + item(); },\n                        bind:       { value: \"\", classes: { selected: function(item){ return item() == item(\"...chosenFolderId\"); } } },\n                        onclick:    function() { this.data(\"...chosenFolderId\", this.data());}\n                    }\n                }\n            }\n        }\n    };\n    return adapterDefinition;\n}});}();\n</pre>\n\nThis is the full fledged way of defining a **view adapter**.  Notice the _function singlePageAppView(viewAdapter)_ declaration.  This is the inner _\"constructor\"_ of the view adapter.  This is not a constructor in the traditional sense, but it is similar.  When this constructor is called, it defines a context for an instance of the view adapter defined in the **adapterDefinition** that it returns.  Note the **viewAdapter** parameter in the constructor signature.  This is the instance of the view adapter that is constructed using the **adapterDefinition** returned from this function.  You may access this locally scoped parameter and interact with the view adapter from your adapter definition.\n\nNext add the following to the JavaScript in the bottom-right pane:\n\n<pre>\n!function()\n{\"use strict\";root.define(\"atomic.singlePageApplicationTutorial.appController\", function singlePageAppController(appView, appProxy)\n{\n    this.launch =\n    function()\n    {\n        appProxy.launch(function(response)\n        {\n            appView.data(\"\", response);\n        });\n    }\n});}();\n</pre>\n\nThis is the full fledged way of defining a **controller**.  Notice that similar to the view adapter block before it, this block begins with _root.define(\"atomic.singlePageApplicationTutorial.appController\", function singlePageAppController(appView, appProxy)_.  This declaration serves two purposes.\n* One it provides a namespacing strategy for where we can define out components in the global context.\n* And two, it provides a way to inject dependencies into the component.  In this case, we are expected to inject the view adapter (_appView_) and a proxy (_appProxy_).\n\nThis **controller** has a single method defined for now named **launch**.  In this method, the controller calls out to the proxy to retrieve the initial data for launching the application and provides a callback where the proxy can return the requested data.  In the callback, the controller updates the **model** in the view adapter with the response received from the proxy.\n\nNext, add the following JavaScript in the bottom-right pane:\n\n<pre>\n!function()\n{\"use strict\";root.define(\"atomic.singlePageApplicationTutorial.appProxy\", function singlePageProtoProxy()\n{\n    var folders = [\"Inbox\", \"Archive\", \"Sent\", \"Spam\"];\n    var methods =\n    {\n        launch:\n        function(callback)\n        {\n            callback\n            ({\n                folders: folders\n            });\n        }\n    };\n    return methods;\n});}();\n</pre>\n\nThis is an example of a **proxy**.  Proxies are a useful construct that isolates and encapsulates remote calls into a collection of methods defined in one place.  This makes it simple to organize and find all of the external dependencies and remote services that your application relies upon.  Typically, one the controller has a reference to the proxy, as the logic involved in making these types of calls is generally best located in the controller class(_es_).\n\nThis proxy has one method defined in it for now named **launch**.  It simple returns the **model** that we started with in the previous step.\n\nLastly, modify the JavaScript content one more time and add the following:\n\n<pre>\n!function(){window.onload   =\nfunction ComposeApp()\n{\n    var atomic          = root.atomic.html.compositionRoot();\n    var app =\n    new root.atomic.singlePageApplicationTutorial.appController\n    (\n        atomic.viewAdapterFactory.createView\n        (\n            new root.atomic.singlePageApplicationTutorial.appView(), \n            document.body\n        ),\n        new root.atomic.singlePageApplicationTutorial.appProxy(),\n        atomic.observer\n    );\n    app.launch();\n};}();\n</pre>\n\nThis is your composition root.  AtomicJS is built with heavy use of dependency injection.  A default partial **composition root** is provided for you at **root.atomic.html.compositionRoot** that initialized a typical instance of AtomicJS suited for working with HTML and web browsers.  However, you are not required to use this partial root and may define every dependency for yourself for AtomicJS within your composition root.  This is an advanced undertaking and outside of the scope for this tutorial.  For now, let's use the provided default.\n\nWe define our **app** as an instance of our **controller**.  The controller requires that we provide it with the following arguments:\n* **appView** - This is our view adapter which is created by AtomicJS by calling the **atomic.viewAdapterFactory.createView** with the result from our app view outer constructor function (_obtained by calling our outer **root.atomic.singlePageApplicationTutorial.appView** constructor function_).  The **createView** function also accepts a second argument containing either a _css selector_ string literal or DOM element node containing the root of the view that is to be attached to the view adapter instance.\n* **appProxy** - This is our application proxy which we simply construct and pass as the argument for this parameter to our application controller\n* **observer** - This is the AtomicJS **observer** component constructor.  Even this constructor is injected to allow for unit testing and alternative implementations to be passed in.\n\nAfter the app has been constructed, we launch it by calling its **launch** method.  Notice that this composition root function is defined on the window.onload event.  This is where the magic begins!\n\nIf you run the updated application, you should see that it looks and behaves just like before.\n\n","targetJavascript":"!function()\n{\"use strict\";root.define(\"atomic.singlePageApplicationTutorial.appView\", function()\n{return function singlePageAppView(viewAdapter)\n{\n    var adapterDefinition   =\n    {\n        controls:\n        {\n            folderList:\n            {\n                bind:   \"folders\",\n                repeat:\n                {\n                    folderListItem:\n                    {\n                        getKey:     function(item){ return \"folder-\" + item(); },\n                        bind:       { value: \"\", classes: { selected: function(item){ return item() == item(\"...chosenFolderId\"); } } },\n                        onclick:    function() { this.data(\"...chosenFolderId\", this.data());}\n                    }\n                }\n            }\n        }\n    };\n    return adapterDefinition;\n}});}();\n\n!function()\n{\"use strict\";root.define(\"atomic.singlePageApplicationTutorial.appController\", function singlePageAppController(appView, appProxy)\n{\n    this.launch =\n    function()\n    {\n        appProxy.launch(function(response)\n        {\n            appView.data(\"\", response);\n        });\n    }\n});}();\n\n!function()\n{\"use strict\";root.define(\"atomic.singlePageApplicationTutorial.appProxy\", function singlePageProtoProxy()\n{\n    var folders = [\"Inbox\", \"Archive\", \"Sent\", \"Spam\"];\n    var methods =\n    {\n        launch:\n        function(callback)\n        {\n            callback\n            ({\n                folders: folders\n            });\n        }\n    };\n    return methods;\n});}();\n\n!function(){window.onload   =\nfunction ComposeApp()\n{\n    var atomic          = root.atomic.html.compositionRoot();\n    var app =\n    new root.atomic.singlePageApplicationTutorial.appController\n    (\n        atomic.viewAdapterFactory.createView\n        (\n            new root.atomic.singlePageApplicationTutorial.appView(), \n            document.body\n        ),\n        new root.atomic.singlePageApplicationTutorial.appProxy()\n    );\n    app.launch();\n};}();","targetHTML":"<ul id=\"folderList\" class=\"folders\">\n    <li id=\"folderListItem\"></li>\n</ul>"},{"instructions":"# Displaying a grid of emails\n\nNow that the visitor can choose a folder, let's show them the mails in that folder.  Start by defining a \"folderChosen\" event on your **view adapter** and setting up a listener to raise this event whenever the **chosenFolderId** model property value changes:\n\n<pre>\nvar adapterDefinition   =\n{\n    controls:\n    {\n        folderList:\n        {\n            ...\n        }<span style=\"background-color: yellow;\">,\n        mailList:\n        {\n            bind:   { value: \"folderData.data\", display: \"folderData\" },\n            repeat:\n            {\n                mailListItem:\n                {\n                    getKey: function(item){ return \"mail-\" + item(\"id\"); },\n                    controls:\n                    {\n                        from:       { bind: \"from\" },\n                        to:         { bind: \"to\" },\n                        subject:    { bind: \"subject\" },\n                        date:       { bind: \"date\" }\n                    }\n                }\n            }\n        }</span>\n    }<span style=\"background-color: yellow;\">,\n    events: [\"folderChosen\"],\n    members:\n    {\n        construct:\n        function()\n        {\n            this.data.listen((function()\n            {\n                if (!this.data(\"chosenFolderId\")) return;\n                if (this.data(\"folderData.folderId\") != this.data(\"chosenFolderId\")) viewAdapter.on.folderChosen(this.data(\"chosenFolderId\"));\n            }).bind(this));\n        }\n    }</span>\n};\n</pre>\n\nNotice the **construct** member.  This is a special method that is called once upon construction of the view adapter.  In this case it registers a callback to fire when the value **chosenFolderId** is \"updated\".  The value is updated whenever it is set via the observer, and when that happens we trigger the **folderChosen** event on the root view adapter as long as the model does not already contain the folder data for the chosenFolderId.\n\nNext, let's add a listener to this event in the **controller**:\n\n<pre>\n{\n    appView.on.folderChosen.listen(function(folderId)\n    {\n        appProxy.getFolderMails(folderId, function(response)\n        {\n            appView.data(\"folderData\", response.folderData);\n        });\n    });\n}\n</pre>\n\nNotice that the **controller** has registered an event listener on the **folderChosen** event of the **view adapter**.  When this event is fired, the controller calls out to the **proxy** to get the mails for the folder that has been selected in the **view adapter** and sets the data returned from the **proxy** into the root **chosenFolderData** property of the model.\n\nNext, we'll add a **getFolderMails** method and some sample data to the **proxy**.\n\n<pre>\n<span style=\"background-color: yellow;\">    var folderData  =\n    {\n        Inbox:\n        [\n            { \"id\": 1, \"from\": \"Abbot \", \"to\": \"steve@example.com\", \"date\": \"May 25, 2011\", \"subject\": \"Booking confirmation #389629244\", \"message\": \"Hi!&lt;br/&gt;&lt;br/&gt;Schwebet und ernsten zu ich träne diesmal schatten ich folgenden erste seh jenem und irrt was menge dunst herauf. Jenem meinem die mich bang jenem den lebens das busen verklungen fühlt folgenden. Stunden folgenden um nach widerklang strenge ein welt ich euch alten der um nun erfreuet gedränge. Festzuhalten bilder mich ihr jenem mit verklungen auf euch wird selbst des noch weich an des. Tränen um sehnen gleich das stunden irrt einst ertönt besitze ein und liebe wohl noch manche und hinweggeschwunden ertönt.&lt;br/&gt;&lt;br/&gt;Lied lieb zauberhauch erste die steigen fühlt mich liebe halbverklungnen zu selbst liebe glück. Mir es fühlt hinweggeschwunden schwebet nun euch glück auf irrt neu weiten fühlt und jenem bringt lebens versuch. Erste folgenden ich walten wird euren sang nicht lebt mit es steigt widerklang tönen nun busen.&lt;br/&gt;&lt;br/&gt;Gesänge zu nun hinweggeschwunden vom mich fühlt träne blick kommt zu. Um wohl es freundliche denen geneigt wird. Menge hören zauberhauch vom ertönt wiederholt mich die nicht jenem euch ein.&lt;br/&gt;&lt;br/&gt;Widerklang der lebens der zug träne selbst sich bilder alten strenge zerstoben zauberhauch die um. Ertönt versuch erfreuet und. Ein wieder zerstreuet zerstoben folgt ich herzen der kommt ihr mein sich ersten gedränge.&lt;br/&gt;&lt;br/&gt;Best regards - Jonas\" },\n            { \"id\": 2, \"from\": \"Addison Begoat \", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"FW: Associate advice\", \"message\": \"Yo...&lt;br/&gt;Augue enim zzril vulputate amet suscipit suscipit ut. Dolor velit eos sit eleifend duo no soluta. Eos sit magna.&lt;br/&gt;&lt;br/&gt;Sadipscing molestie voluptua clita kasd sadipscing dolor accusam quis accusam consetetur invidunt erat dolore. Dolor consetetur sed ea lorem et et suscipit magna ipsum magna sit eu sed sea vel.&lt;br/&gt;&lt;br/&gt;Ut nonumy no stet congue nonumy amet luptatum et dolor enim eirmod erat kasd accusam diam eirmod. Dolor et vel diam qui sadipscing et erat ut erat nonummy dolor ea accusam sit eirmod illum eos accusam. Invidunt vulputate diam dolore est voluptua dolores et dolor iriure tincidunt consetetur elitr vero kasd clita sed.&lt;br/&gt;&lt;br/&gt;Thanks,&lt;br/&gt;Ali\" },\n            { \"id\": 3, \"from\": \"Allistair &lt;leroy72@plane-railway.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 19, 2011\", \"subject\": \"RE: Phone call tomorrow 5 o'clock\" },\n            { \"id\": 4, \"from\": \"emmanuel26@ghost.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 22, 2011\", \"subject\": \"Completing basketball project\" },\n            { \"id\": 5, \"from\": \"jamalia.alnismith1@twigdad.xyz\", \"to\": \"steve@example.com\", \"date\": \"Apr 26, 2011\", \"subject\": \"FW: Can you get DE to resubmit accounts?\" },\n            { \"id\": 6, \"from\": \"lionel.qugy@cribsmoke.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 22, 2011\", \"subject\": \"RE: Catch up at 9:00 to finalise rain spec\" },\n            { \"id\": 7, \"from\": \"Madison Lalinesson &lt;melinda.gofagy@wing-language2.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 19, 2011\", \"subject\": \"RE: Pencil scenarios\" },\n            { \"id\": 8, \"from\": \"rajah.nukripyford@cast92.xyz\", \"to\": \"steve@example.com\", \"date\": \"Apr 28, 2011\", \"subject\": \"Flavor benefit gig\" },\n            { \"id\": 9, \"from\": \"Sandra Juanhison &lt;yoshi.mostaline72@facefruit.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 8, 2011\", \"subject\": \"RE: Apparel5 network is back up\" },\n            { \"id\": 10, \"from\": \"Sylvester &lt;rose.va@bunpig98.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 1, 2011\", \"subject\": \"Feedback requested by Ayanna Nuyo\" },\n            { \"id\": 11, \"from\": \"veronica@heart.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"Project Book starting 6pm\" },\n            { \"id\": 12, \"from\": \"XLN &lt;basia@framehome.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 8, 2011\", \"subject\": \"RE: Remember Whoopi's joke\" }\n        ],\n        Archive:\n        [\n            { \"id\": 13, \"from\": \"adele.guyuson@hat-chicken6.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 2, 2011\", \"subject\": \"RE: Reservation confirmation #999331516\" },\n            { \"id\": 14, \"from\": \"blair@pleasure-cactus77.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 24, 2011\", \"subject\": \"Project Sky  - your job is 9pm\" },\n            { \"id\": 15, \"from\": \"brennan@lake.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 20, 2011\", \"subject\": \"RE: Car9 network is out of service\" },\n            { \"id\": 16, \"from\": \"BYLB &lt;travis98@downtown28.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 20, 2011\", \"subject\": \"RE: Pear tactics\" },\n            { \"id\": 17, \"from\": \"catherine85@fanhope14.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 6, 2011\", \"subject\": \"Meet with Camilla\" },\n            { \"id\": 18, \"from\": \"channing11@moon26.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 13, 2011\", \"subject\": \"Meeting at 9am\" },\n            { \"id\": 19, \"from\": \"clio.gucysmith@pailmountain.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 2, 2011\", \"subject\": \"Your order P815875237 has dispatched\" },\n            { \"id\": 20, \"from\": \"erich.grizajuson7@volleyball-icicle.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 23, 2011\", \"subject\": \"Reservation confirmation #439756385\" },\n            { \"id\": 21, \"from\": \"fitzgerald.togoag@bike.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 24, 2011\", \"subject\": \"Feedback requested by Bradley Vasedrismith\" },\n            { \"id\": 22, \"from\": \"harriet1@pear-daughter.xyz\", \"to\": \"steve@example.com\", \"date\": \"Apr 30, 2011\", \"subject\": \"RE: Hall server is back up\" },\n            { \"id\": 23, \"from\": \"Ila &lt;raja@quiet.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 14, 2011\", \"subject\": \"RE: Your order A435146969 is delayed\" },\n            { \"id\": 24, \"from\": \"Kareem Wyeson &lt;anne56@crayon21.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 16, 2011\", \"subject\": \"FW: Straw diagrams\" },\n            { \"id\": 25, \"from\": \"keith2@hope.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 14, 2011\", \"subject\": \"Operation Island finished\" },\n            { \"id\": 26, \"from\": \"lev.vopiyosson@dirt-crown.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 3, 2011\", \"subject\": \"RE: DB Replication ending now\" },\n            { \"id\": 27, \"from\": \"melinda.atla@string-hall94.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 18, 2011\", \"subject\": \"have clinic appt at 5:45\" },\n            { \"id\": 28, \"from\": \"Richard &lt;fiona2@wrench.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"Beam5 network is back up\" },\n            { \"id\": 29, \"from\": \"sean.mayel@string37.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"Feedback requested by Dawn Pytosson\" },\n            { \"id\": 30, \"from\": \"Simone &lt;roary@bushes.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 9, 2011\", \"subject\": \"RE: Does Nolan know C#?\" },\n            { \"id\": 31, \"from\": \"thaddeus.tregube5@butter coast.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 18, 2011\", \"subject\": \"RE: Remember Chava's brother\" },\n            { \"id\": 32, \"from\": \"zenia.dayson@pail-apparel8.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 11, 2011\", \"subject\": \"RE: Reviewing VHD demo\" }\n        ],\n        Sent:\n        [\n            { \"id\": 33, \"from\": \"steve@example.com\", \"to\": \"callum.wyeslyfa@fang ghost.xyz\", \"date\": \"May 13, 2011\", \"subject\": \"RE: Logo ideas\" },\n            { \"id\": 34, \"from\": \"steve@example.com\", \"to\": \"camilla.qusesson@visitor.xyz\", \"date\": \"May 6, 2011\", \"subject\": \"RE: Yo\" },\n            { \"id\": 35, \"from\": \"steve@example.com\", \"to\": \"claudia3@team87.xyz\", \"date\": \"May 3, 2011\", \"subject\": \"RE: Out at doctor\" },\n            { \"id\": 36, \"from\": \"steve@example.com\", \"to\": \"felix.ultiford@grape.xyz\", \"date\": \"May 17, 2011\", \"subject\": \"See you Tuesday 1pm\" },\n            { \"id\": 37, \"from\": \"steve@example.com\", \"to\": \"Geraldine Yoro &lt;tashya.qupaansson@boundarysummer.xyz&gt;\", \"date\": \"Apr 30, 2011\", \"subject\": \"Rain meet-up\" },\n            { \"id\": 38, \"from\": \"steve@example.com\", \"to\": \"Hedda &lt;kameko.antreoprsmith@pancakehook.xyz&gt;\", \"date\": \"May 1, 2011\", \"subject\": \"RE: Associates tactics meeting: 4:30\" },\n            { \"id\": 39, \"from\": \"steve@example.com\", \"to\": \"Ingrid &lt;glenna.ni96@plastic.xyz&gt;\", \"date\": \"May 14, 2011\", \"subject\": \"RE: Reservation confirmation #763296484\" },\n            { \"id\": 40, \"from\": \"steve@example.com\", \"to\": \"Isaac &lt;rooney.steson@cattle-spy21.xyz&gt;\", \"date\": \"May 14, 2011\", \"subject\": \"Employee benefits policy\" },\n            { \"id\": 41, \"from\": \"steve@example.com\", \"to\": \"MFHV &lt;heather84@seed.xyz&gt;\", \"date\": \"May 25, 2011\", \"subject\": \"FW: Gate server is out of service\" },\n            { \"id\": 42, \"from\": \"steve@example.com\", \"to\": \"Noel Coford &lt;colt.wyeline53@frame.xyz&gt;\", \"date\": \"May 2, 2011\", \"subject\": \"RE: Territory event\" },\n            { \"id\": 43, \"from\": \"steve@example.com\", \"to\": \"Roanna &lt;elizabeth.griwasi36@railwayjuice.xyz&gt;\", \"date\": \"Apr 27, 2011\", \"subject\": \"Operation Horse ending 8pm\" }\n        ],\n        Spam:\n        [\n            { \"id\": 44, \"from\": \"Vance &lt;signe64@wilderness.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"@@ Meet new friends online @@\" },\n            { \"id\": 45, \"from\": \"aiko.ossmith@cake-cannon.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 16, 2011\", \"subject\": \"Samuel's n0se is perfect - fix yours t0day\" },\n            { \"id\": 46, \"from\": \"Anne &lt;brenda.fube@space-father.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"you're meds order #Y555764626\" },\n            { \"id\": 47, \"from\": \"baker.tometo7@road-plantation.xyz\", \"to\": \"steve@example.com\", \"date\": \"Apr 29, 2011\", \"subject\": \"Does ZZX excuse the trail?\" },\n            { \"id\": 48, \"from\": \"brennan.linexetresson@sleet57.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 6, 2011\", \"subject\": \"FREE iPAD 2 GUARANTEED\" },\n            { \"id\": 49, \"from\": \"Charlotte &lt;kasimir@wrenchmarble4.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"no other product can help\" },\n            { \"id\": 50, \"from\": \"Deanna Wridaypa &lt;luke.pytocooson@mitten.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 1, 2011\", \"subject\": \"!!Winner!! Place first 1000USD bet free\" },\n            { \"id\": 51, \"from\": \"Hamilton Yueehi &lt;jameson.yuhapa@income-family.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 10, 2011\", \"subject\": \"2 unread message(s): Hello Taylor\" },\n            { \"id\": 52, \"from\": \"hasad.lineeesson1@camp-stew.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 20, 2011\", \"subject\": \"March United Bank Inc\" },\n            { \"id\": 53, \"from\": \"HGLF &lt;anastasia7@tree-hook.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"YouPharmacy5 special offer: 80% off this week only\" },\n            { \"id\": 54, \"from\": \"Isabella Hasmith &lt;linda.tocoovaford@bedroomcactus6.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"Apr 27, 2011\", \"subject\": \"Ticket confirmation #484993598\" },\n            { \"id\": 55, \"from\": \"jackson.passon@frogbreakfast.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"УДВОЕНИЕ СКОРОСТИ ЧТЕНИЯ ЗА 3 ЧАСА\" },\n            { \"id\": 56, \"from\": \"leandra@advice.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"Stunning replica watches\" },\n            { \"id\": 57, \"from\": \"russell.drison@cannoncoast1.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 26, 2011\", \"subject\": \"RE: Hi Murphy...\" },\n            { \"id\": 58, \"from\": \"william.boam@throat-horn.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 16, 2011\", \"subject\": \"An exclusive offer from your bank\" },\n            { \"id\": 59, \"from\": \"zephania.va@crookvolcano55.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 5, 2011\", \"subject\": \"Днепропетровск\" },\n            { \"id\": 60, \"from\": \"ZK &lt;joshua@sun-money.xyz&gt;\", \"to\": \"steve@example.com\", \"date\": \"May 12, 2011\", \"subject\": \"Somebody invited you to join eReaders Community\" }\n        ]\n    };</span>\n    var methods =\n    {\n        launch:\n        function(callback)\n        {\n            ...\n        }<span style=\"background-color: yellow;\">,\n        getFolderMails:\n        function(folderId, callback)\n        {\n            callback\n            ({\n                folders:    folders,\n                folderData: {folderId: folderId, data: folderData[folderId]}\n            })\n        }</span>\n    };\n</pre>\n\nNotice that we are _faking_ the back end services in this proxy.  This is basically a prototype proxy or _proto proxy_ for short.  It's purpose is to mock/fake the backend services while the front end is under development.  The objects/values passed back and forth to the proxy constitute the contracts for the future backend services (if they do not exist yet, otheriwse you should probably be using the existing services, right?).\n\nFinally, let's add a control to display the folder mails in a grid.  Modify the view and view adapter as such:\n\n<pre>\n&lt;table class=\"mails\"&gt;\n    &lt;thead&gt;&lt;tr&gt;&lt;th&gt;From&lt;/th&gt;&lt;th&gt;To&lt;/th&gt;&lt;th&gt;Subject&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;\n    &lt;tbody id=\"mailList\"&gt;\n        &lt;tr id=\"mailListItem\"&gt;\n            &lt;td id=\"from\"&gt;&lt;/td&gt;\n            &lt;td id=\"to\"&gt;&lt;/td&gt;\n            &lt;td id=\"subject\"&gt;&lt;/td&gt;\n            &lt;td id=\"date\"&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</pre>\n\n<pre>\nfolderList:\n{\n    ...\n}<span style=\"background-color: yellow;\">,\nmailList:\n{\n    bind: \"chosenFolderData\",\n    repeat:\n    {\n        mailListItem:\n        {\n            getKey: function(item){ return \"mail-\" + item(\"id\"); },\n            controls:\n            {\n                from:       { bind: \"from\" },\n                to:         { bind: \"to\" },\n                subject:    { bind: \"subject\" },\n                date:       { bind: \"date\" }\n            }\n        }\n    }\n}</span>,\nchosenFolder:\n{\n    ...\n}\n</pre>\n\nTry it: you should now see the grid displaying mails when you click on any folder.\n\nLast thing, let's make the \"Inbox\" appear by default (i.e. without needing the user to click it).  Modify the **launch** method in the proxy:\n\n<pre>\nlaunch:\nfunction(callback)\n{\n    callback\n    ({\n        folders:        folders<span style=\"background-color: yellow;\">,\n        chosenFolderId: \"Inbox\",\n        folderData:     {folderId: \"Inbox\", data: folderData[\"Inbox\"]}</span>\n    });\n}\n</pre>\n","targetJavascript":"!function()\n{\"use strict\";root.define(\"atomic.singlePageApplicationTutorial.appView\", function()\n{return function singlePageAppView(viewAdapter)\n{\n    var adapterDefinition   =\n    {\n        controls:\n        {\n            folderList:\n            {\n                bind:   \"folders\",\n                repeat:\n                {\n                    folderListItem:\n                    {\n                        getKey:     function(item){ return \"folder-\" + item(); },\n                        bind:       { value: \"\", classes: { selected: function(item){ return item() == item(\"...chosenFolderId\"); } } },\n                        onclick:    function() { this.data(\"...chosenFolderId\", this.data()); }\n                    }\n                }\n            },\n            mailList:\n            {\n                bind:   { value: \"folderData.data\", display: \"folderData\" },\n                repeat:\n                {\n                    mailListItem:\n                    {\n                        getKey: function(item){ return \"mail-\" + item(\"id\"); },\n                        controls:\n                        {\n                            from:       { bind: \"from\" },\n                            to:         { bind: \"to\" },\n                            subject:    { bind: \"subject\" },\n                            date:       { bind: \"date\" }\n                        }\n                    }\n                }\n            }\n        },\n        events: [\"folderChosen\"],\n        members:\n        {\n            construct:\n            function()\n            {\n                this.data.listen((function()\n                {\n                    if (!this.data(\"chosenFolderId\")) return;\n                    if (this.data(\"folderData.folderId\") != this.data(\"chosenFolderId\")) viewAdapter.on.folderChosen(this.data(\"chosenFolderId\"));\n                }).bind(this));\n            }\n        }\n    };\n    return adapterDefinition;\n}});}();\n\n!function()\n{\"use strict\";root.define(\"atomic.singlePageApplicationTutorial.appController\", function singlePageAppController(appView, appProxy)\n{\n    appView.on.folderChosen.listen(function(folderId)\n    {\n        appProxy.getFolderMails(folderId, function(response)\n        {\n            appView.data(\"folderData\", response.folderData);\n        });\n    });\n\n    this.launch =\n    function()\n    {\n        appProxy.launch(function(response)\n        {\n            appView.data(\"\", response);\n        });\n    }\n});}();\n\n!function()\n{\"use strict\";root.define(\"atomic.singlePageApplicationTutorial.appProxy\", function singlePageProtoProxy()\n{\n    var folders     = [\"Inbox\", \"Archive\", \"Sent\", \"Spam\"];\n    var folderData  =\n    {\n        Inbox:\n        [\n            { \"id\": 1, \"from\": \"Abbot \", \"to\": \"steve@example.com\", \"date\": \"May 25, 2011\", \"subject\": \"Booking confirmation #389629244\", \"message\": \"Hi!<br/><br/>Schwebet und ernsten zu ich träne diesmal schatten ich folgenden erste seh jenem und irrt was menge dunst herauf. Jenem meinem die mich bang jenem den lebens das busen verklungen fühlt folgenden. Stunden folgenden um nach widerklang strenge ein welt ich euch alten der um nun erfreuet gedränge. Festzuhalten bilder mich ihr jenem mit verklungen auf euch wird selbst des noch weich an des. Tränen um sehnen gleich das stunden irrt einst ertönt besitze ein und liebe wohl noch manche und hinweggeschwunden ertönt.<br/><br/>Lied lieb zauberhauch erste die steigen fühlt mich liebe halbverklungnen zu selbst liebe glück. Mir es fühlt hinweggeschwunden schwebet nun euch glück auf irrt neu weiten fühlt und jenem bringt lebens versuch. Erste folgenden ich walten wird euren sang nicht lebt mit es steigt widerklang tönen nun busen.<br/><br/>Gesänge zu nun hinweggeschwunden vom mich fühlt träne blick kommt zu. Um wohl es freundliche denen geneigt wird. Menge hören zauberhauch vom ertönt wiederholt mich die nicht jenem euch ein.<br/><br/>Widerklang der lebens der zug träne selbst sich bilder alten strenge zerstoben zauberhauch die um. Ertönt versuch erfreuet und. Ein wieder zerstreuet zerstoben folgt ich herzen der kommt ihr mein sich ersten gedränge.<br/><br/>Best regards - Jonas\" },\n            { \"id\": 2, \"from\": \"Addison Begoat \", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"FW: Associate advice\", \"message\": \"Yo...<br/>Augue enim zzril vulputate amet suscipit suscipit ut. Dolor velit eos sit eleifend duo no soluta. Eos sit magna.<br/><br/>Sadipscing molestie voluptua clita kasd sadipscing dolor accusam quis accusam consetetur invidunt erat dolore. Dolor consetetur sed ea lorem et et suscipit magna ipsum magna sit eu sed sea vel.<br/><br/>Ut nonumy no stet congue nonumy amet luptatum et dolor enim eirmod erat kasd accusam diam eirmod. Dolor et vel diam qui sadipscing et erat ut erat nonummy dolor ea accusam sit eirmod illum eos accusam. Invidunt vulputate diam dolore est voluptua dolores et dolor iriure tincidunt consetetur elitr vero kasd clita sed.<br/><br/>Thanks,<br/>Ali\" },\n            { \"id\": 3, \"from\": \"Allistair \", \"to\": \"steve@example.com\", \"date\": \"May 19, 2011\", \"subject\": \"RE: Phone call tomorrow 5 o'clock\" },\n            { \"id\": 4, \"from\": \"emmanuel26@ghost.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 22, 2011\", \"subject\": \"Completing basketball project\" },\n            { \"id\": 5, \"from\": \"jamalia.alnismith1@twigdad.xyz\", \"to\": \"steve@example.com\", \"date\": \"Apr 26, 2011\", \"subject\": \"FW: Can you get DE to resubmit accounts?\" },\n            { \"id\": 6, \"from\": \"lionel.qugy@cribsmoke.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 22, 2011\", \"subject\": \"RE: Catch up at 9:00 to finalise rain spec\" },\n            { \"id\": 7, \"from\": \"Madison Lalinesson \", \"to\": \"steve@example.com\", \"date\": \"May 19, 2011\", \"subject\": \"RE: Pencil scenarios\" },\n            { \"id\": 8, \"from\": \"rajah.nukripyford@cast92.xyz\", \"to\": \"steve@example.com\", \"date\": \"Apr 28, 2011\", \"subject\": \"Flavor benefit gig\" },\n            { \"id\": 9, \"from\": \"Sandra Juanhison \", \"to\": \"steve@example.com\", \"date\": \"May 8, 2011\", \"subject\": \"RE: Apparel5 network is back up\" },\n            { \"id\": 10, \"from\": \"Sylvester \", \"to\": \"steve@example.com\", \"date\": \"May 1, 2011\", \"subject\": \"Feedback requested by Ayanna Nuyo\" },\n            { \"id\": 11, \"from\": \"veronica@heart.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"Project Book starting 6pm\" },\n            { \"id\": 12, \"from\": \"XLN \", \"to\": \"steve@example.com\", \"date\": \"May 8, 2011\", \"subject\": \"RE: Remember Whoopi's joke\" }\n        ],\n        Archive:\n        [\n            { \"id\": 13, \"from\": \"adele.guyuson@hat-chicken6.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 2, 2011\", \"subject\": \"RE: Reservation confirmation #999331516\" },\n            { \"id\": 14, \"from\": \"blair@pleasure-cactus77.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 24, 2011\", \"subject\": \"Project Sky  - your job is 9pm\" },\n            { \"id\": 15, \"from\": \"brennan@lake.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 20, 2011\", \"subject\": \"RE: Car9 network is out of service\" },\n            { \"id\": 16, \"from\": \"BYLB \", \"to\": \"steve@example.com\", \"date\": \"May 20, 2011\", \"subject\": \"RE: Pear tactics\" },\n            { \"id\": 17, \"from\": \"catherine85@fanhope14.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 6, 2011\", \"subject\": \"Meet with Camilla\" },\n            { \"id\": 18, \"from\": \"channing11@moon26.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 13, 2011\", \"subject\": \"Meeting at 9am\" },\n            { \"id\": 19, \"from\": \"clio.gucysmith@pailmountain.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 2, 2011\", \"subject\": \"Your order P815875237 has dispatched\" },\n            { \"id\": 20, \"from\": \"erich.grizajuson7@volleyball-icicle.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 23, 2011\", \"subject\": \"Reservation confirmation #439756385\" },\n            { \"id\": 21, \"from\": \"fitzgerald.togoag@bike.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 24, 2011\", \"subject\": \"Feedback requested by Bradley Vasedrismith\" },\n            { \"id\": 22, \"from\": \"harriet1@pear-daughter.xyz\", \"to\": \"steve@example.com\", \"date\": \"Apr 30, 2011\", \"subject\": \"RE: Hall server is back up\" },\n            { \"id\": 23, \"from\": \"Ila \", \"to\": \"steve@example.com\", \"date\": \"May 14, 2011\", \"subject\": \"RE: Your order A435146969 is delayed\" },\n            { \"id\": 24, \"from\": \"Kareem Wyeson \", \"to\": \"steve@example.com\", \"date\": \"May 16, 2011\", \"subject\": \"FW: Straw diagrams\" },\n            { \"id\": 25, \"from\": \"keith2@hope.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 14, 2011\", \"subject\": \"Operation Island finished\" },\n            { \"id\": 26, \"from\": \"lev.vopiyosson@dirt-crown.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 3, 2011\", \"subject\": \"RE: DB Replication ending now\" },\n            { \"id\": 27, \"from\": \"melinda.atla@string-hall94.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 18, 2011\", \"subject\": \"have clinic appt at 5:45\" },\n            { \"id\": 28, \"from\": \"Richard \", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"Beam5 network is back up\" },\n            { \"id\": 29, \"from\": \"sean.mayel@string37.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"Feedback requested by Dawn Pytosson\" },\n            { \"id\": 30, \"from\": \"Simone \", \"to\": \"steve@example.com\", \"date\": \"May 9, 2011\", \"subject\": \"RE: Does Nolan know C#?\" },\n            { \"id\": 31, \"from\": \"thaddeus.tregube5@butter coast.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 18, 2011\", \"subject\": \"RE: Remember Chava's brother\" },\n            { \"id\": 32, \"from\": \"zenia.dayson@pail-apparel8.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 11, 2011\", \"subject\": \"RE: Reviewing VHD demo\" }\n        ],\n        Sent:\n        [\n            { \"id\": 33, \"from\": \"steve@example.com\", \"to\": \"callum.wyeslyfa@fang ghost.xyz\", \"date\": \"May 13, 2011\", \"subject\": \"RE: Logo ideas\" },\n            { \"id\": 34, \"from\": \"steve@example.com\", \"to\": \"camilla.qusesson@visitor.xyz\", \"date\": \"May 6, 2011\", \"subject\": \"RE: Yo\" },\n            { \"id\": 35, \"from\": \"steve@example.com\", \"to\": \"claudia3@team87.xyz\", \"date\": \"May 3, 2011\", \"subject\": \"RE: Out at doctor\" },\n            { \"id\": 36, \"from\": \"steve@example.com\", \"to\": \"felix.ultiford@grape.xyz\", \"date\": \"May 17, 2011\", \"subject\": \"See you Tuesday 1pm\" },\n            { \"id\": 37, \"from\": \"steve@example.com\", \"to\": \"Geraldine Yoro \", \"date\": \"Apr 30, 2011\", \"subject\": \"Rain meet-up\" },\n            { \"id\": 38, \"from\": \"steve@example.com\", \"to\": \"Hedda \", \"date\": \"May 1, 2011\", \"subject\": \"RE: Associates tactics meeting: 4:30\" },\n            { \"id\": 39, \"from\": \"steve@example.com\", \"to\": \"Ingrid \", \"date\": \"May 14, 2011\", \"subject\": \"RE: Reservation confirmation #763296484\" },\n            { \"id\": 40, \"from\": \"steve@example.com\", \"to\": \"Isaac \", \"date\": \"May 14, 2011\", \"subject\": \"Employee benefits policy\" },\n            { \"id\": 41, \"from\": \"steve@example.com\", \"to\": \"MFHV \", \"date\": \"May 25, 2011\", \"subject\": \"FW: Gate server is out of service\" },\n            { \"id\": 42, \"from\": \"steve@example.com\", \"to\": \"Noel Coford \", \"date\": \"May 2, 2011\", \"subject\": \"RE: Territory event\" },\n            { \"id\": 43, \"from\": \"steve@example.com\", \"to\": \"Roanna \", \"date\": \"Apr 27, 2011\", \"subject\": \"Operation Horse ending 8pm\" }\n        ],\n        Spam:\n        [\n            { \"id\": 44, \"from\": \"Vance \", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"@@ Meet new friends online @@\" },\n            { \"id\": 45, \"from\": \"aiko.ossmith@cake-cannon.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 16, 2011\", \"subject\": \"Samuel's n0se is perfect - fix yours t0day\" },\n            { \"id\": 46, \"from\": \"Anne \", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"you're meds order #Y555764626\" },\n            { \"id\": 47, \"from\": \"baker.tometo7@road-plantation.xyz\", \"to\": \"steve@example.com\", \"date\": \"Apr 29, 2011\", \"subject\": \"Does ZZX excuse the trail?\" },\n            { \"id\": 48, \"from\": \"brennan.linexetresson@sleet57.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 6, 2011\", \"subject\": \"FREE iPAD 2 GUARANTEED\" },\n            { \"id\": 49, \"from\": \"Charlotte \", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"no other product can help\" },\n            { \"id\": 50, \"from\": \"Deanna Wridaypa \", \"to\": \"steve@example.com\", \"date\": \"May 1, 2011\", \"subject\": \"!!Winner!! Place first 1000USD bet free\" },\n            { \"id\": 51, \"from\": \"Hamilton Yueehi \", \"to\": \"steve@example.com\", \"date\": \"May 10, 2011\", \"subject\": \"2 unread message(s): Hello Taylor\" },\n            { \"id\": 52, \"from\": \"hasad.lineeesson1@camp-stew.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 20, 2011\", \"subject\": \"March United Bank Inc\" },\n            { \"id\": 53, \"from\": \"HGLF \", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"YouPharmacy5 special offer: 80% off this week only\" },\n            { \"id\": 54, \"from\": \"Isabella Hasmith \", \"to\": \"steve@example.com\", \"date\": \"Apr 27, 2011\", \"subject\": \"Ticket confirmation #484993598\" },\n            { \"id\": 55, \"from\": \"jackson.passon@frogbreakfast.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"УДВОЕНИЕ СКОРОСТИ ЧТЕНИЯ ЗА 3 ЧАСА\" },\n            { \"id\": 56, \"from\": \"leandra@advice.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"Stunning replica watches\" },\n            { \"id\": 57, \"from\": \"russell.drison@cannoncoast1.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 26, 2011\", \"subject\": \"RE: Hi Murphy...\" },\n            { \"id\": 58, \"from\": \"william.boam@throat-horn.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 16, 2011\", \"subject\": \"An exclusive offer from your bank\" },\n            { \"id\": 59, \"from\": \"zephania.va@crookvolcano55.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 5, 2011\", \"subject\": \"Днепропетровск\" },\n            { \"id\": 60, \"from\": \"ZK \", \"to\": \"steve@example.com\", \"date\": \"May 12, 2011\", \"subject\": \"Somebody invited you to join eReaders Community\" }\n        ]\n    };\n    var methods     =\n    {\n        launch:\n        function(callback)\n        {\n            callback\n            ({\n                folders:        folders,\n                chosenFolderId: \"Inbox\",\n                folderData:     {folderId: \"Inbox\", data: folderData[\"Inbox\"]}\n            });\n        },\n        getFolderMails:\n        function(folderId, callback)\n        {\n            callback\n            ({\n                folders:    folders,\n                folderData: {folderId: folderId, data: folderData[folderId]}\n            })\n        }\n    };\n    return methods;\n});}();\n\n!function(){window.onload   =\nfunction ComposeApp()\n{\n    var atomic          = root.atomic.html.compositionRoot();\n    var app =\n    new root.atomic.singlePageApplicationTutorial.appController\n    (\n        atomic.viewAdapterFactory.createView\n        (\n            new root.atomic.singlePageApplicationTutorial.appView(), \n            document.body\n        ),\n        new root.atomic.singlePageApplicationTutorial.appProxy()\n    );\n    app.launch();\n};}();","targetHTML":"<ul id=\"folderList\" class=\"folders\">\n    <li id=\"folderListItem\"></li>\n</ul>\n<table class=\"mails\">\n    <thead><tr><th>From</th><th>To</th><th>Subject</th><th>Date</th></tr></thead>\n    <tbody id=\"mailList\">\n        <tr id=\"mailListItem\">\n            <td id=\"from\"></td>\n            <td id=\"to\"></td>\n            <td id=\"subject\"></td>\n            <td id=\"date\"></td>\n        </tr>\n    </tbody>\n</table>"},{"instructions":"# Viewing individual emails\n\nThe visitor can now navigate between folders.  What about letting them open and read specific emails?  As with folder navigation, let's start by adding an **emailChosen** event on the **view adapter** and updating the **construct** method to register a listener on the bound **observer** to listen for changes to the value of the **chosenEmailId** root model property.\n\n<pre>\nevents: [\"folderChosen\"<span style=\"background-color: yellow;\">, \"emailChosen\"</span>],\nmembers:\n{\n    construct:\n    function()\n    {\n        this.data.listen((function()\n        {\n            if (!this.data(\"chosenFolderId\")) return;\n            if (this.data(\"folderData.folderId\") != this.data(\"chosenFolderId\")) viewAdapter.on.folderChosen(this.data(\"chosenFolderId\"));\n<span style=\"background-color: yellow;\">                    this.data.delete(\"chosenEmailId\");\n            this.data.delete(\"email\");</span>\n        }).bind(this));\n<span style=\"background-color: yellow;\">        this.data.listen((function()\n        {\n            if (!this.data(\"chosenEmailId\")) return;\n            if (this.data(\"email.emailId\") != this.data(\"chosenEmailId\")) viewAdapter.on.emailChosen(this.data(\"chosenEmailId\"));\n            this.data.delete(\"chosenFolderId\");\n            this.data.delete(\"folderData\");\n        }).bind(this));</span>\n    }\n}\n</pre>\n\nNext let's add a click event handler to the **mailListItem** that will updated the **chosenEmailId** value whenever it is clicked:\n\n<pre>\nmailListItem:\n{\n    getKey: function(item){ return \"mail-\" + item(\"id\"); },\n    controls:\n    {\n        ...\n    }<span style=\"background-color: yellow;\">,\n    onclick:    function() { this.data(\"...chosenEmailId\", this.data(\"id\")); }</span>\n}\n</pre>\n\nNext, let's add a listener to in the **controller** to the new **emailChosen** event of the **view adapter**:\n\n<pre>\nappView.on.emailChosen.listen(function(emailId)\n{\n    appProxy.getEmail(emailId, function(response)\n    {\n        appView.data(\"email\", response.email);\n    });\n});\n</pre>\n\nNext, add a **findEmail** helper function and a **getEmail** method to the **proxy** to simulate retrieving the email data from the server:\n\n<pre>\n<span style=\"background-color: yellow;\">function findEmail(emailId)\n{\n    for(var folderId in folderData)\n    for(var counter=0;counter&lt;folderData[folderId].length;counter++)\n    if (folderData[folderId][counter].id == emailId)    return folderData[folderId][counter];\n}</span>\n\n...\ngetFolderMails:\nfunction(folderId, callback)\n{\n    ...\n}<span style=\"background-color: yellow;\">,\ngetEmail:\nfunction(emailId, callback)\n{\n    callback\n    ({\n        folders:    folders,\n        email:      {emailId: emailId, data: findEmail(emailId)}\n    })\n}</span>\n</pre>\n\nNow we can display the email by adding a few more elements and controls to our view and **view adapter**:\n\n<pre>\n&lt;div id=\"emailViewer\" class=\"viewMail\">\n    &lt;div class=\"mailInfo\"&gt;\n        &lt;h1 id=\"subject\"&gt;&lt;/h1&gt;\n        &lt;p&gt;&lt;label&gt;From&lt;/label&gt;: &lt;span id=\"from\"&gt;&lt;/span&gt;&lt;/p&gt;\n        &lt;p&gt;&lt;label&gt;To&lt;/label&gt;: &lt;span id=\"to\"&gt;&lt;/span&gt;&lt;/p&gt;\n        &lt;p&gt;&lt;label&gt;Date&lt;/label&gt;: &lt;span id=\"date\"&gt;&lt;/span&gt;&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;p class=\"message\" id=\"message\"&gt;&lt;/p&gt;\n&lt;/div&gt;\n</pre>\n\n<pre>\nmailList:\n{\n    ...\n}<span style=\"background-color: yellow;\">,\nemailViewer:\n{\n    bind:       { value: \"email.data\", display: \"email\" },\n    controls:\n    {\n        subject:    { bind: \"subject\" },\n        from:       { bind: \"from\" },\n        to:         { bind: \"to\" },\n        date:       { bind: \"date\" },\n        message:    { bind: \"message\" }\n    }\n}</span>\n</pre>\n\nNow if you click on an email you should see it appear on the screen.\n\nGreat work!  You've now got a responsive webmail user interface where the visitor can move between folders and instantly open individual emails.\n\n\n","javascript":"","html":"","targetJavascript":"!function()\n{\"use strict\";root.define(\"atomic.singlePageApplicationTutorial.appView\", function()\n{return function singlePageAppView(viewAdapter)\n{\n    var adapterDefinition   =\n    {\n        controls:\n        {\n            folderList:\n            {\n                bind:   \"folders\",\n                repeat:\n                {\n                    folderListItem:\n                    {\n                        getKey:     function(item){ return \"folder-\" + item(); },\n                        bind:       { value: \"\", classes: { selected: function(item){ return item() == item(\"...chosenFolderId\"); } } },\n                        onclick:    function() { this.data(\"...chosenFolderId\", this.data()); }\n                    }\n                }\n            },\n            mailList:\n            {\n                bind: { value: \"folderData.data\", display: \"folderData\" },\n                repeat:\n                {\n                    mailListItem:\n                    {\n                        getKey: function(item){ return \"mail-\" + item(\"id\"); },\n                        controls:\n                        {\n                            from:       { bind: \"from\" },\n                            to:         { bind: \"to\" },\n                            subject:    { bind: \"subject\" },\n                            date:       { bind: \"date\" }\n                        },\n                        onclick:    function() { this.data(\"...chosenEmailId\", this.data(\"id\")); }\n                    }\n                }\n            },\n            emailViewer:\n            {\n                bind:       { value: \"email.data\", display: \"email\" },\n                controls:\n                {\n                    subject:    { bind: \"subject\" },\n                    from:       { bind: \"from\" },\n                    to:         { bind: \"to\" },\n                    date:       { bind: \"date\" },\n                    message:    { bind: \"message\" }\n                }\n            }\n        },\n        events: [\"folderChosen\", \"emailChosen\"],\n        members:\n        {\n            construct:\n            function()\n            {\n                this.data.listen((function()\n                {\n                    if (!this.data(\"chosenFolderId\")) return;\n                    if (this.data(\"folderData.folderId\") != this.data(\"chosenFolderId\")) viewAdapter.on.folderChosen(this.data(\"chosenFolderId\"));\n                    this.data.delete(\"chosenEmailId\");\n                    this.data.delete(\"email\");\n                }).bind(this));\n                this.data.listen((function()\n                {\n                    if (!this.data(\"chosenEmailId\")) return;\n                    if (this.data(\"email.emailId\") != this.data(\"chosenEmailId\")) viewAdapter.on.emailChosen(this.data(\"chosenEmailId\"));\n                    this.data.delete(\"chosenFolderId\");\n                    this.data.delete(\"folderData\");\n                }).bind(this));\n            }\n        }\n    };\n    return adapterDefinition;\n}});}();\n\n!function()\n{\"use strict\";root.define(\"atomic.singlePageApplicationTutorial.appController\", function singlePageAppController(appView, appProxy)\n{\n    appView.on.folderChosen.listen(function(folderId)\n    {\n        appProxy.getFolderMails(folderId, function(response)\n        {\n            appView.data(\"folderData\", response.folderData);\n        });\n    });\n\n    appView.on.emailChosen.listen(function(emailId)\n    {\n        appProxy.getEmail(emailId, function(response)\n        {\n            appView.data(\"email\", response.email);\n        });\n    });\n\n    this.launch =\n    function()\n    {\n        appProxy.launch(function(response)\n        {\n            appView.data(\"\", response);\n        });\n    }\n});}();\n\n!function()\n{\"use strict\";root.define(\"atomic.singlePageApplicationTutorial.appProxy\", function singlePageProtoProxy()\n{\n    var folders     = [\"Inbox\", \"Archive\", \"Sent\", \"Spam\"];\n    var folderData  =\n    {\n        Inbox:\n        [\n            { \"id\": 1, \"from\": \"Abbot \", \"to\": \"steve@example.com\", \"date\": \"May 25, 2011\", \"subject\": \"Booking confirmation #389629244\", \"message\": \"Hi!<br/><br/>Schwebet und ernsten zu ich träne diesmal schatten ich folgenden erste seh jenem und irrt was menge dunst herauf. Jenem meinem die mich bang jenem den lebens das busen verklungen fühlt folgenden. Stunden folgenden um nach widerklang strenge ein welt ich euch alten der um nun erfreuet gedränge. Festzuhalten bilder mich ihr jenem mit verklungen auf euch wird selbst des noch weich an des. Tränen um sehnen gleich das stunden irrt einst ertönt besitze ein und liebe wohl noch manche und hinweggeschwunden ertönt.<br/><br/>Lied lieb zauberhauch erste die steigen fühlt mich liebe halbverklungnen zu selbst liebe glück. Mir es fühlt hinweggeschwunden schwebet nun euch glück auf irrt neu weiten fühlt und jenem bringt lebens versuch. Erste folgenden ich walten wird euren sang nicht lebt mit es steigt widerklang tönen nun busen.<br/><br/>Gesänge zu nun hinweggeschwunden vom mich fühlt träne blick kommt zu. Um wohl es freundliche denen geneigt wird. Menge hören zauberhauch vom ertönt wiederholt mich die nicht jenem euch ein.<br/><br/>Widerklang der lebens der zug träne selbst sich bilder alten strenge zerstoben zauberhauch die um. Ertönt versuch erfreuet und. Ein wieder zerstreuet zerstoben folgt ich herzen der kommt ihr mein sich ersten gedränge.<br/><br/>Best regards - Jonas\" },\n            { \"id\": 2, \"from\": \"Addison Begoat \", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"FW: Associate advice\", \"message\": \"Yo...<br/>Augue enim zzril vulputate amet suscipit suscipit ut. Dolor velit eos sit eleifend duo no soluta. Eos sit magna.<br/><br/>Sadipscing molestie voluptua clita kasd sadipscing dolor accusam quis accusam consetetur invidunt erat dolore. Dolor consetetur sed ea lorem et et suscipit magna ipsum magna sit eu sed sea vel.<br/><br/>Ut nonumy no stet congue nonumy amet luptatum et dolor enim eirmod erat kasd accusam diam eirmod. Dolor et vel diam qui sadipscing et erat ut erat nonummy dolor ea accusam sit eirmod illum eos accusam. Invidunt vulputate diam dolore est voluptua dolores et dolor iriure tincidunt consetetur elitr vero kasd clita sed.<br/><br/>Thanks,<br/>Ali\" },\n            { \"id\": 3, \"from\": \"Allistair \", \"to\": \"steve@example.com\", \"date\": \"May 19, 2011\", \"subject\": \"RE: Phone call tomorrow 5 o'clock\" },\n            { \"id\": 4, \"from\": \"emmanuel26@ghost.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 22, 2011\", \"subject\": \"Completing basketball project\" },\n            { \"id\": 5, \"from\": \"jamalia.alnismith1@twigdad.xyz\", \"to\": \"steve@example.com\", \"date\": \"Apr 26, 2011\", \"subject\": \"FW: Can you get DE to resubmit accounts?\" },\n            { \"id\": 6, \"from\": \"lionel.qugy@cribsmoke.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 22, 2011\", \"subject\": \"RE: Catch up at 9:00 to finalise rain spec\" },\n            { \"id\": 7, \"from\": \"Madison Lalinesson \", \"to\": \"steve@example.com\", \"date\": \"May 19, 2011\", \"subject\": \"RE: Pencil scenarios\" },\n            { \"id\": 8, \"from\": \"rajah.nukripyford@cast92.xyz\", \"to\": \"steve@example.com\", \"date\": \"Apr 28, 2011\", \"subject\": \"Flavor benefit gig\" },\n            { \"id\": 9, \"from\": \"Sandra Juanhison \", \"to\": \"steve@example.com\", \"date\": \"May 8, 2011\", \"subject\": \"RE: Apparel5 network is back up\" },\n            { \"id\": 10, \"from\": \"Sylvester \", \"to\": \"steve@example.com\", \"date\": \"May 1, 2011\", \"subject\": \"Feedback requested by Ayanna Nuyo\" },\n            { \"id\": 11, \"from\": \"veronica@heart.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"Project Book starting 6pm\" },\n            { \"id\": 12, \"from\": \"XLN \", \"to\": \"steve@example.com\", \"date\": \"May 8, 2011\", \"subject\": \"RE: Remember Whoopi's joke\" }\n        ],\n        Archive:\n        [\n            { \"id\": 13, \"from\": \"adele.guyuson@hat-chicken6.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 2, 2011\", \"subject\": \"RE: Reservation confirmation #999331516\" },\n            { \"id\": 14, \"from\": \"blair@pleasure-cactus77.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 24, 2011\", \"subject\": \"Project Sky  - your job is 9pm\" },\n            { \"id\": 15, \"from\": \"brennan@lake.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 20, 2011\", \"subject\": \"RE: Car9 network is out of service\" },\n            { \"id\": 16, \"from\": \"BYLB \", \"to\": \"steve@example.com\", \"date\": \"May 20, 2011\", \"subject\": \"RE: Pear tactics\" },\n            { \"id\": 17, \"from\": \"catherine85@fanhope14.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 6, 2011\", \"subject\": \"Meet with Camilla\" },\n            { \"id\": 18, \"from\": \"channing11@moon26.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 13, 2011\", \"subject\": \"Meeting at 9am\" },\n            { \"id\": 19, \"from\": \"clio.gucysmith@pailmountain.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 2, 2011\", \"subject\": \"Your order P815875237 has dispatched\" },\n            { \"id\": 20, \"from\": \"erich.grizajuson7@volleyball-icicle.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 23, 2011\", \"subject\": \"Reservation confirmation #439756385\" },\n            { \"id\": 21, \"from\": \"fitzgerald.togoag@bike.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 24, 2011\", \"subject\": \"Feedback requested by Bradley Vasedrismith\" },\n            { \"id\": 22, \"from\": \"harriet1@pear-daughter.xyz\", \"to\": \"steve@example.com\", \"date\": \"Apr 30, 2011\", \"subject\": \"RE: Hall server is back up\" },\n            { \"id\": 23, \"from\": \"Ila \", \"to\": \"steve@example.com\", \"date\": \"May 14, 2011\", \"subject\": \"RE: Your order A435146969 is delayed\" },\n            { \"id\": 24, \"from\": \"Kareem Wyeson \", \"to\": \"steve@example.com\", \"date\": \"May 16, 2011\", \"subject\": \"FW: Straw diagrams\" },\n            { \"id\": 25, \"from\": \"keith2@hope.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 14, 2011\", \"subject\": \"Operation Island finished\" },\n            { \"id\": 26, \"from\": \"lev.vopiyosson@dirt-crown.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 3, 2011\", \"subject\": \"RE: DB Replication ending now\" },\n            { \"id\": 27, \"from\": \"melinda.atla@string-hall94.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 18, 2011\", \"subject\": \"have clinic appt at 5:45\" },\n            { \"id\": 28, \"from\": \"Richard \", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"Beam5 network is back up\" },\n            { \"id\": 29, \"from\": \"sean.mayel@string37.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"Feedback requested by Dawn Pytosson\" },\n            { \"id\": 30, \"from\": \"Simone \", \"to\": \"steve@example.com\", \"date\": \"May 9, 2011\", \"subject\": \"RE: Does Nolan know C#?\" },\n            { \"id\": 31, \"from\": \"thaddeus.tregube5@butter coast.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 18, 2011\", \"subject\": \"RE: Remember Chava's brother\" },\n            { \"id\": 32, \"from\": \"zenia.dayson@pail-apparel8.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 11, 2011\", \"subject\": \"RE: Reviewing VHD demo\" }\n        ],\n        Sent:\n        [\n            { \"id\": 33, \"from\": \"steve@example.com\", \"to\": \"callum.wyeslyfa@fang ghost.xyz\", \"date\": \"May 13, 2011\", \"subject\": \"RE: Logo ideas\" },\n            { \"id\": 34, \"from\": \"steve@example.com\", \"to\": \"camilla.qusesson@visitor.xyz\", \"date\": \"May 6, 2011\", \"subject\": \"RE: Yo\" },\n            { \"id\": 35, \"from\": \"steve@example.com\", \"to\": \"claudia3@team87.xyz\", \"date\": \"May 3, 2011\", \"subject\": \"RE: Out at doctor\" },\n            { \"id\": 36, \"from\": \"steve@example.com\", \"to\": \"felix.ultiford@grape.xyz\", \"date\": \"May 17, 2011\", \"subject\": \"See you Tuesday 1pm\" },\n            { \"id\": 37, \"from\": \"steve@example.com\", \"to\": \"Geraldine Yoro \", \"date\": \"Apr 30, 2011\", \"subject\": \"Rain meet-up\" },\n            { \"id\": 38, \"from\": \"steve@example.com\", \"to\": \"Hedda \", \"date\": \"May 1, 2011\", \"subject\": \"RE: Associates tactics meeting: 4:30\" },\n            { \"id\": 39, \"from\": \"steve@example.com\", \"to\": \"Ingrid \", \"date\": \"May 14, 2011\", \"subject\": \"RE: Reservation confirmation #763296484\" },\n            { \"id\": 40, \"from\": \"steve@example.com\", \"to\": \"Isaac \", \"date\": \"May 14, 2011\", \"subject\": \"Employee benefits policy\" },\n            { \"id\": 41, \"from\": \"steve@example.com\", \"to\": \"MFHV \", \"date\": \"May 25, 2011\", \"subject\": \"FW: Gate server is out of service\" },\n            { \"id\": 42, \"from\": \"steve@example.com\", \"to\": \"Noel Coford \", \"date\": \"May 2, 2011\", \"subject\": \"RE: Territory event\" },\n            { \"id\": 43, \"from\": \"steve@example.com\", \"to\": \"Roanna \", \"date\": \"Apr 27, 2011\", \"subject\": \"Operation Horse ending 8pm\" }\n        ],\n        Spam:\n        [\n            { \"id\": 44, \"from\": \"Vance \", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"@@ Meet new friends online @@\" },\n            { \"id\": 45, \"from\": \"aiko.ossmith@cake-cannon.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 16, 2011\", \"subject\": \"Samuel's n0se is perfect - fix yours t0day\" },\n            { \"id\": 46, \"from\": \"Anne \", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"you're meds order #Y555764626\" },\n            { \"id\": 47, \"from\": \"baker.tometo7@road-plantation.xyz\", \"to\": \"steve@example.com\", \"date\": \"Apr 29, 2011\", \"subject\": \"Does ZZX excuse the trail?\" },\n            { \"id\": 48, \"from\": \"brennan.linexetresson@sleet57.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 6, 2011\", \"subject\": \"FREE iPAD 2 GUARANTEED\" },\n            { \"id\": 49, \"from\": \"Charlotte \", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"no other product can help\" },\n            { \"id\": 50, \"from\": \"Deanna Wridaypa \", \"to\": \"steve@example.com\", \"date\": \"May 1, 2011\", \"subject\": \"!!Winner!! Place first 1000USD bet free\" },\n            { \"id\": 51, \"from\": \"Hamilton Yueehi \", \"to\": \"steve@example.com\", \"date\": \"May 10, 2011\", \"subject\": \"2 unread message(s): Hello Taylor\" },\n            { \"id\": 52, \"from\": \"hasad.lineeesson1@camp-stew.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 20, 2011\", \"subject\": \"March United Bank Inc\" },\n            { \"id\": 53, \"from\": \"HGLF \", \"to\": \"steve@example.com\", \"date\": \"May 4, 2011\", \"subject\": \"YouPharmacy5 special offer: 80% off this week only\" },\n            { \"id\": 54, \"from\": \"Isabella Hasmith \", \"to\": \"steve@example.com\", \"date\": \"Apr 27, 2011\", \"subject\": \"Ticket confirmation #484993598\" },\n            { \"id\": 55, \"from\": \"jackson.passon@frogbreakfast.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"УДВОЕНИЕ СКОРОСТИ ЧТЕНИЯ ЗА 3 ЧАСА\" },\n            { \"id\": 56, \"from\": \"leandra@advice.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 7, 2011\", \"subject\": \"Stunning replica watches\" },\n            { \"id\": 57, \"from\": \"russell.drison@cannoncoast1.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 26, 2011\", \"subject\": \"RE: Hi Murphy...\" },\n            { \"id\": 58, \"from\": \"william.boam@throat-horn.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 16, 2011\", \"subject\": \"An exclusive offer from your bank\" },\n            { \"id\": 59, \"from\": \"zephania.va@crookvolcano55.xyz\", \"to\": \"steve@example.com\", \"date\": \"May 5, 2011\", \"subject\": \"Днепропетровск\" },\n            { \"id\": 60, \"from\": \"ZK \", \"to\": \"steve@example.com\", \"date\": \"May 12, 2011\", \"subject\": \"Somebody invited you to join eReaders Community\" }\n        ]\n    };\n    function findEmail(emailId)\n    {\n        for(var folderId in folderData)\n        for(var counter=0;counter<folderData[folderId].length;counter++)\n        if (folderData[folderId][counter].id == emailId)    return folderData[folderId][counter];\n    }\n    var methods     =\n    {\n        launch:\n        function(callback)\n        {\n            callback\n            ({\n                folders:        folders,\n                chosenFolderId: \"Inbox\",\n                folderData:     {folderId: \"Inbox\", data: folderData[\"Inbox\"]}\n            });\n        },\n        getFolderMails:\n        function(folderId, callback)\n        {\n            callback\n            ({\n                folders:    folders,\n                folderData: {folderId: folderId, data: folderData[folderId]}\n            })\n        },\n        getEmail:\n        function(emailId, callback)\n        {\n            callback\n            ({\n                folders:    folders,\n                email:      {emailId: emailId, data: findEmail(emailId)}\n            })\n        }\n    };\n    return methods;\n});}();\n\n!function(){window.onload   =\nfunction ComposeApp()\n{\n    var atomic          = root.atomic.html.compositionRoot();\n    var app =\n    new root.atomic.singlePageApplicationTutorial.appController\n    (\n        atomic.viewAdapterFactory.createView\n        (\n            new root.atomic.singlePageApplicationTutorial.appView(), \n            document.body\n        ),\n        new root.atomic.singlePageApplicationTutorial.appProxy()\n    );\n    app.launch();\n};}();","targetHTML":"<ul id=\"folderList\" class=\"folders\">\n    <li id=\"folderListItem\"></li>\n</ul>\n<table id=\"mailList\" class=\"mails\">\n    <thead><tr><th>From</th><th>To</th><th>Subject</th><th>Date</th></tr></thead>\n    <tbody>\n        <tr id=\"mailListItem\">\n            <td id=\"from\"></td>\n            <td id=\"to\"></td>\n            <td id=\"subject\"></td>\n            <td id=\"date\"></td>\n        </tr>\n    </tbody>\n</table>\n\n<div id=\"emailViewer\" class=\"viewMail\">\n    <div class=\"mailInfo\">\n        <h1 id=\"subject\"></h1>\n        <p><label>From</label>: <span id=\"from\"></span></p>\n        <p><label>To</label>: <span id=\"to\"></span></p>\n        <p><label>Date</label>: <span id=\"date\"></span></p>\n    </div>\n    <p class=\"message\" id=\"messageContent\"></p>\n</div>"},{"instructions":"# Apples to Pears\n\nFor some who are familiar with other frameworks/libraries, the code in the previous lessons may have seemed a bit verbose.  While the code size was arbitrarily increased due to the extra separation of concerns employed, AtomicJS does not actually require this.\n\nPlease hit the \"Help - it's not working!\" button to see a more _\"Apples to Pears\"_ comparison that uses less code but still functions the same.\n\nWhile the reduced code base is still built with more code, the behaviors and bindings are separated from the markup and the model, unlike other approaches, where the bindings and some behaviors/directives are often mingled in the markup and other behaviors are defined in the model (_known as viewmodels_).\n\n","javascript":"","html":"","targetJavascript":"/*Data*/function findEmail(e){for(var t in folderData)for(var a=0;a<folderData[t].length;a++)if(folderData[t][a].id==e)return folderData[t][a]}function getFolderMails(e,t){t({folders:folders,folderData:folderData[e]})}function getEmail(e,t){t({folders:folders,email:findEmail(e)})}var folders=[\"Inbox\",\"Archive\",\"Sent\",\"Spam\"],folderData={Inbox:[{id:1,from:\"Abbot \",to:\"steve@example.com\",date:\"May 25, 2011\",subject:\"Booking confirmation #389629244\",message:\"Hi!<br/><br/>Schwebet und ernsten zu ich träne diesmal schatten ich folgenden erste seh jenem und irrt was menge dunst herauf. Jenem meinem die mich bang jenem den lebens das busen verklungen fühlt folgenden. Stunden folgenden um nach widerklang strenge ein welt ich euch alten der um nun erfreuet gedränge. Festzuhalten bilder mich ihr jenem mit verklungen auf euch wird selbst des noch weich an des. Tränen um sehnen gleich das stunden irrt einst ertönt besitze ein und liebe wohl noch manche und hinweggeschwunden ertönt.<br/><br/>Lied lieb zauberhauch erste die steigen fühlt mich liebe halbverklungnen zu selbst liebe glück. Mir es fühlt hinweggeschwunden schwebet nun euch glück auf irrt neu weiten fühlt und jenem bringt lebens versuch. Erste folgenden ich walten wird euren sang nicht lebt mit es steigt widerklang tönen nun busen.<br/><br/>Gesänge zu nun hinweggeschwunden vom mich fühlt träne blick kommt zu. Um wohl es freundliche denen geneigt wird. Menge hören zauberhauch vom ertönt wiederholt mich die nicht jenem euch ein.<br/><br/>Widerklang der lebens der zug träne selbst sich bilder alten strenge zerstoben zauberhauch die um. Ertönt versuch erfreuet und. Ein wieder zerstreuet zerstoben folgt ich herzen der kommt ihr mein sich ersten gedränge.<br/><br/>Best regards - Jonas\"},{id:2,from:\"Addison Begoat \",to:\"steve@example.com\",date:\"May 7, 2011\",subject:\"FW: Associate advice\",message:\"Yo...<br/>Augue enim zzril vulputate amet suscipit suscipit ut. Dolor velit eos sit eleifend duo no soluta. Eos sit magna.<br/><br/>Sadipscing molestie voluptua clita kasd sadipscing dolor accusam quis accusam consetetur invidunt erat dolore. Dolor consetetur sed ea lorem et et suscipit magna ipsum magna sit eu sed sea vel.<br/><br/>Ut nonumy no stet congue nonumy amet luptatum et dolor enim eirmod erat kasd accusam diam eirmod. Dolor et vel diam qui sadipscing et erat ut erat nonummy dolor ea accusam sit eirmod illum eos accusam. Invidunt vulputate diam dolore est voluptua dolores et dolor iriure tincidunt consetetur elitr vero kasd clita sed.<br/><br/>Thanks,<br/>Ali\"},{id:3,from:\"Allistair \",to:\"steve@example.com\",date:\"May 19, 2011\",subject:\"RE: Phone call tomorrow 5 o'clock\"},{id:4,from:\"emmanuel26@ghost.xyz\",to:\"steve@example.com\",date:\"May 22, 2011\",subject:\"Completing basketball project\"},{id:5,from:\"jamalia.alnismith1@twigdad.xyz\",to:\"steve@example.com\",date:\"Apr 26, 2011\",subject:\"FW: Can you get DE to resubmit accounts?\"},{id:6,from:\"lionel.qugy@cribsmoke.xyz\",to:\"steve@example.com\",date:\"May 22, 2011\",subject:\"RE: Catch up at 9:00 to finalise rain spec\"},{id:7,from:\"Madison Lalinesson \",to:\"steve@example.com\",date:\"May 19, 2011\",subject:\"RE: Pencil scenarios\"},{id:8,from:\"rajah.nukripyford@cast92.xyz\",to:\"steve@example.com\",date:\"Apr 28, 2011\",subject:\"Flavor benefit gig\"},{id:9,from:\"Sandra Juanhison \",to:\"steve@example.com\",date:\"May 8, 2011\",subject:\"RE: Apparel5 network is back up\"},{id:10,from:\"Sylvester \",to:\"steve@example.com\",date:\"May 1, 2011\",subject:\"Feedback requested by Ayanna Nuyo\"},{id:11,from:\"veronica@heart.xyz\",to:\"steve@example.com\",date:\"May 4, 2011\",subject:\"Project Book starting 6pm\"},{id:12,from:\"XLN \",to:\"steve@example.com\",date:\"May 8, 2011\",subject:\"RE: Remember Whoopi's joke\"}],Archive:[{id:13,from:\"adele.guyuson@hat-chicken6.xyz\",to:\"steve@example.com\",date:\"May 2, 2011\",subject:\"RE: Reservation confirmation #999331516\"},{id:14,from:\"blair@pleasure-cactus77.xyz\",to:\"steve@example.com\",date:\"May 24, 2011\",subject:\"Project Sky  - your job is 9pm\"},{id:15,from:\"brennan@lake.xyz\",to:\"steve@example.com\",date:\"May 20, 2011\",subject:\"RE: Car9 network is out of service\"},{id:16,from:\"BYLB \",to:\"steve@example.com\",date:\"May 20, 2011\",subject:\"RE: Pear tactics\"},{id:17,from:\"catherine85@fanhope14.xyz\",to:\"steve@example.com\",date:\"May 6, 2011\",subject:\"Meet with Camilla\"},{id:18,from:\"channing11@moon26.xyz\",to:\"steve@example.com\",date:\"May 13, 2011\",subject:\"Meeting at 9am\"},{id:19,from:\"clio.gucysmith@pailmountain.xyz\",to:\"steve@example.com\",date:\"May 2, 2011\",subject:\"Your order P815875237 has dispatched\"},{id:20,from:\"erich.grizajuson7@volleyball-icicle.xyz\",to:\"steve@example.com\",date:\"May 23, 2011\",subject:\"Reservation confirmation #439756385\"},{id:21,from:\"fitzgerald.togoag@bike.xyz\",to:\"steve@example.com\",date:\"May 24, 2011\",subject:\"Feedback requested by Bradley Vasedrismith\"},{id:22,from:\"harriet1@pear-daughter.xyz\",to:\"steve@example.com\",date:\"Apr 30, 2011\",subject:\"RE: Hall server is back up\"},{id:23,from:\"Ila \",to:\"steve@example.com\",date:\"May 14, 2011\",subject:\"RE: Your order A435146969 is delayed\"},{id:24,from:\"Kareem Wyeson \",to:\"steve@example.com\",date:\"May 16, 2011\",subject:\"FW: Straw diagrams\"},{id:25,from:\"keith2@hope.xyz\",to:\"steve@example.com\",date:\"May 14, 2011\",subject:\"Operation Island finished\"},{id:26,from:\"lev.vopiyosson@dirt-crown.xyz\",to:\"steve@example.com\",date:\"May 3, 2011\",subject:\"RE: DB Replication ending now\"},{id:27,from:\"melinda.atla@string-hall94.xyz\",to:\"steve@example.com\",date:\"May 18, 2011\",subject:\"have clinic appt at 5:45\"},{id:28,from:\"Richard \",to:\"steve@example.com\",date:\"May 4, 2011\",subject:\"Beam5 network is back up\"},{id:29,from:\"sean.mayel@string37.xyz\",to:\"steve@example.com\",date:\"May 7, 2011\",subject:\"Feedback requested by Dawn Pytosson\"},{id:30,from:\"Simone \",to:\"steve@example.com\",date:\"May 9, 2011\",subject:\"RE: Does Nolan know C#?\"},{id:31,from:\"thaddeus.tregube5@butter coast.xyz\",to:\"steve@example.com\",date:\"May 18, 2011\",subject:\"RE: Remember Chava's brother\"},{id:32,from:\"zenia.dayson@pail-apparel8.xyz\",to:\"steve@example.com\",date:\"May 11, 2011\",subject:\"RE: Reviewing VHD demo\"}],Sent:[{id:33,from:\"steve@example.com\",to:\"callum.wyeslyfa@fang ghost.xyz\",date:\"May 13, 2011\",subject:\"RE: Logo ideas\"},{id:34,from:\"steve@example.com\",to:\"camilla.qusesson@visitor.xyz\",date:\"May 6, 2011\",subject:\"RE: Yo\"},{id:35,from:\"steve@example.com\",to:\"claudia3@team87.xyz\",date:\"May 3, 2011\",subject:\"RE: Out at doctor\"},{id:36,from:\"steve@example.com\",to:\"felix.ultiford@grape.xyz\",date:\"May 17, 2011\",subject:\"See you Tuesday 1pm\"},{id:37,from:\"steve@example.com\",to:\"Geraldine Yoro \",date:\"Apr 30, 2011\",subject:\"Rain meet-up\"},{id:38,from:\"steve@example.com\",to:\"Hedda \",date:\"May 1, 2011\",subject:\"RE: Associates tactics meeting: 4:30\"},{id:39,from:\"steve@example.com\",to:\"Ingrid \",date:\"May 14, 2011\",subject:\"RE: Reservation confirmation #763296484\"},{id:40,from:\"steve@example.com\",to:\"Isaac \",date:\"May 14, 2011\",subject:\"Employee benefits policy\"},{id:41,from:\"steve@example.com\",to:\"MFHV \",date:\"May 25, 2011\",subject:\"FW: Gate server is out of service\"},{id:42,from:\"steve@example.com\",to:\"Noel Coford \",date:\"May 2, 2011\",subject:\"RE: Territory event\"},{id:43,from:\"steve@example.com\",to:\"Roanna \",date:\"Apr 27, 2011\",subject:\"Operation Horse ending 8pm\"}],Spam:[{id:44,from:\"Vance \",to:\"steve@example.com\",date:\"May 4, 2011\",subject:\"@@ Meet new friends online @@\"},{id:45,from:\"aiko.ossmith@cake-cannon.xyz\",to:\"steve@example.com\",date:\"May 16, 2011\",subject:\"Samuel's n0se is perfect - fix yours t0day\"},{id:46,from:\"Anne \",to:\"steve@example.com\",date:\"May 4, 2011\",subject:\"you're meds order #Y555764626\"},{id:47,from:\"baker.tometo7@road-plantation.xyz\",to:\"steve@example.com\",date:\"Apr 29, 2011\",subject:\"Does ZZX excuse the trail?\"},{id:48,from:\"brennan.linexetresson@sleet57.xyz\",to:\"steve@example.com\",date:\"May 6, 2011\",subject:\"FREE iPAD 2 GUARANTEED\"},{id:49,from:\"Charlotte \",to:\"steve@example.com\",date:\"May 7, 2011\",subject:\"no other product can help\"},{id:50,from:\"Deanna Wridaypa \",to:\"steve@example.com\",date:\"May 1, 2011\",subject:\"!!Winner!! Place first 1000USD bet free\"},{id:51,from:\"Hamilton Yueehi \",to:\"steve@example.com\",date:\"May 10, 2011\",subject:\"2 unread message(s): Hello Taylor\"},{id:52,from:\"hasad.lineeesson1@camp-stew.xyz\",to:\"steve@example.com\",date:\"May 20, 2011\",subject:\"March United Bank Inc\"},{id:53,from:\"HGLF \",to:\"steve@example.com\",date:\"May 4, 2011\",subject:\"YouPharmacy5 special offer: 80% off this week only\"},{id:54,from:\"Isabella Hasmith \",to:\"steve@example.com\",date:\"Apr 27, 2011\",subject:\"Ticket confirmation #484993598\"},{id:55,from:\"jackson.passon@frogbreakfast.xyz\",to:\"steve@example.com\",date:\"May 7, 2011\",subject:\"УДВОЕНИЕ СКОРОСТИ ЧТЕНИЯ ЗА 3 ЧАСА\"},{id:56,from:\"leandra@advice.xyz\",to:\"steve@example.com\",date:\"May 7, 2011\",subject:\"Stunning replica watches\"},{id:57,from:\"russell.drison@cannoncoast1.xyz\",to:\"steve@example.com\",date:\"May 26, 2011\",subject:\"RE: Hi Murphy...\"},{id:58,from:\"william.boam@throat-horn.xyz\",to:\"steve@example.com\",date:\"May 16, 2011\",subject:\"An exclusive offer from your bank\"},{id:59,from:\"zephania.va@crookvolcano55.xyz\",to:\"steve@example.com\",date:\"May 5, 2011\",subject:\"Днепропетровск\"},{id:60,from:\"ZK \",to:\"steve@example.com\",date:\"May 12, 2011\",subject:\"Somebody invited you to join eReaders Community\"}]};\nroot.atomic.launch({\n    folderList: {\n        bind:   \"folders\",\n        repeat: {\n            folderListItem: {\n                getKey:     function(item){ return \"folder-\" + item(); },\n                bind:       { value: \"\", classes: { selected: function(item){ return item() == item(\"...chosenFolderId\"); } } },\n                onclick:    function()  { \n                    this.data(\"...chosenFolderId\", this.data());\n                    this.data.delete(\"...email\");\n                    getFolderMails(this.data(), (function(response){this.data(\"...folderData\", response.folderData);}).bind(this));\n                }\n            }\n        }\n    },\n    mailList:   {\n        bind:   { value: \"folderData\", display: \"folderData\" },\n        repeat: {\n            mailListItem:   {\n                getKey:     function(item){ return \"mail-\" + item(\"id\"); },\n                controls:   {\n                    from:       { bind: \"from\" },\n                    to:         { bind: \"to\" },\n                    subject:    { bind: \"subject\" },\n                    date:       { bind: \"date\" }\n                },\n                onclick:    function() {\n                    getEmail(this.data(\"id\"), (function(response){this.data(\"...email\", response.email); }).bind(this));\n                    this.data.delete(\"...folderData\");\n                }\n            }\n        }\n    },\n    emailViewer:    {\n        bind:       { value: \"email\", display: \"email\" },\n        controls:   {\n            subject:    { bind: \"subject\" },\n            from:       { bind: \"from\" },\n            to:         { bind: \"to\" },\n            date:       { bind: \"date\" },\n            message:    { bind: \"message\" }\n        }\n    }\n},{\n    folders:        folders,\n    chosenFolderId: \"Inbox\",\n    folderData:     folderData[\"Inbox\"]\n});","targetHTML":"<ul id=\"folderList\" class=\"folders\">\n    <li id=\"folderListItem\"></li>\n</ul>\n<table id=\"mailList\" class=\"mails\">\n    <thead><tr><th>From</th><th>To</th><th>Subject</th><th>Date</th></tr></thead>\n    <tbody>\n        <tr id=\"mailListItem\">\n            <td id=\"from\"></td>\n            <td id=\"to\"></td>\n            <td id=\"subject\"></td>\n            <td id=\"date\"></td>\n        </tr>\n    </tbody>\n</table>\n<div id=\"emailViewer\" class=\"viewMail\">\n    <div class=\"mailInfo\">\n        <h1 id=\"subject\"></h1>\n        <p><label>From</label>: <span id=\"from\"></span></p>\n        <p><label>To</label>: <span id=\"to\"></span></p>\n        <p><label>Date</label>: <span id=\"date\"></span></p>\n    </div>\n    <p class=\"message\" id=\"messageContent\"></p>\n</div>\n"}]}
                }
            ]
        };
        return data;
    }

    return methods;
});}();