!function()
{"use strict";root.define("atomic.playground.appProxy", function tutorialProtoProxy(localStorage, json)
{
    var examplesKey = "atomic.playground.data.examples";
    function installData(key, data)
    {
        localStorage.setItem(key, json.stringify(data));
    }
    function getData(key, installer)
    {
        if (localStorage.getItem(key) == null)  installData(key, installer());
        return json.parse(localStorage.getItem(key));
    }
    var methods =
    {
        launch:
        function(callback)
        {
            var examples    = getData(examplesKey, getDefaultExamples);
            callback
            ({
                data:
                {
                    examples:   examples
                }
            });
        },
        saveExamples:
        function(examples, callback)
        {
            installData(examplesKey, examples);
            this.launch(callback);
        },
        resetExamples:
        function(callback)
        {
            installData(examplesKey, getDefaultExamples());
            this.launch(callback);
        }
    };

    function getDefaultExamples()
    {
        var data =
        {
            active:             "--Select an example--",
            viewEngineModel:    false,
            livePreview:        true,
            editorTheme:        "ace/theme/crimson_editor",
            examples:
            [
                {
                    name:       "--Select an example--",
                    example:
                    {
                        placeholder: true,
                        description:
`# Welcome

This site contains a series of playgrounds that you can experiment with while learning how to use the AtomicJS library.  Please select an existing playground from the drop down list above or add a new one.`
                    }
                },
                {
                    name:       "Hello World",
                    example:
                    {
                        description:    
`# Hello World
This is the classic hello world example.  Note that the word \`World\` in the example is dynamically obtained from the model using a simple value binding.

This example uses the simplest overload of the \`root.atomic.launch\` method which accepts a single argument containing the [\`view adapter\` definition](https://github.com/TyreeJackson/atomic/wiki/AtomicJS-Documentation#view-adapter-definition-structure).
`,
                        javascript:     "root.atomic.launch ({worldLabel: {value: \"World\"}});",
                        css:            "",
                        html:           "<div class=\"well\">\n    <h1 id=\"greeting\">Hello <span id=\"worldLabel\"></span>!</h1>\n</div>"
                    }
                },
                {
                    name:       "Hello World Revisited",
                    example:
                    {
                        description:
`# Hello World Revisited
In this version of the hello world example, the greeting is not displayed until the Say Hello button has been pressed.

This example uses the following overload of the launch method: \`root.atomic.launch(\`*\`cssSelector\`*\`, \`*\`viewAdapterDefinition\`*\`)\` where the \`cssSelector\` parameter accepts a string argument containing a css selector that locates the root element of the view and the \`viewAdapterDefinition\` parameter accepts an object argument containing the [\`view adapter\` definition](https://github.com/TyreeJackson/atomic/wiki/AtomicJS-Documentation#view-adapter-definition-structure).
`,
                        javascript: "root.atomic.launch\n(\n    \"#example2\",\n    {\n        greeting2:      {bind: { display: \"worldValue.length\" }},\n        worldLabel2:    {bind: \"worldValue\"},\n        sayHelloButton:\n        {\n            onclick:    function(){ this.data(\"worldValue\",\"World\"); }, \n            bind:       { display: function(item){return !item.hasValue(\"worldValue\"); } }\n        }\n    }\n);",
                        css:        "",
                        html:       "<div id=\"example2\">\n    <div class=\"example\">\n        <div class=\"well\">\n            <h1 id=\"greeting2\">Hello <span id=\"worldLabel2\"></span>!</h1>\n            <button id=\"sayHelloButton\">Say Hello</button>\n        </div>\n    </div>\n</div>"
                    }
                },
                {
                    name:       "Hello Friend",
                    example:
                    {
                        description:
`# Hello Friend
In this example there are two textboxes that have been bounded to the \`firstName\` and \`lastName\` properties of the model.

The first textbox has a \`focused\` \`initializer\` set to true which sets focus to the textbox when it is loaded.

Both textboxes have the \`updateon\` binding option set to notify the observer of changes as the user presses down or up on any key in addition to any other IO event that changes the value of the input field.

Both textboxes also have a function set to their \`onescape\` events which clear the contents of their field when the \`escape\` key is pressed while focused.

There is a readonly control whose \`display\` property has been bounded to a function that returns true whenever either the \`firstName\` or \`lastName\` field of the model has a value.

There is another readonly control that is adapting multiple \`span\` elements in the view and is bound to a function that concantenates and returns the \`firstName\` and \`lastName\` property values from the model.
`,
                        javascript:     "root.atomic.launch\n(\n    \"#example3\",\n    {\n        firstNameTextbox:\n        {\n            focused:    true,\n            bind:       { value: { to: \"firstName\", updateon: [\"keydown\", \"keyup\", \"change\"] } },\n            onescape:   function(){ this.value(\"\"); }\n        },\n        lastNameTextbox:\n        {\n            bind:       { value: { to: \"lastName\", updateon: [\"keydown\", \"keyup\", \"change\"] } },\n            onescape:   function(){this.value(\"\");}\n        },\n        helloMessage:\n        {\n            bind:   { display: function(){return this.data.hasValue(\"firstName\") || this.data.hasValue(\"lastName\");} }\n        },\n        nameLabels:\n        {\n            selector:   \".name\",\n            bind:       function(data){return (this.data(\"firstName\")||\"\") + (this.data(\"firstName\") && this.data(\"lastName\")?\" \":\"\") + (this.data(\"lastName\")||\"\");}\n        }\n    }\n);",
                        css:            "",
                        html:           "<div id=\"example3\">\n    <div class=\"example\">\n        <div class=\"well form-group\">\n            <div><input id=\"firstNameTextbox\" autocomplete=\"off\" class=\"form-control\" placeholder=\"Enter your first name:\" /></div>\n            <div><input id=\"lastNameTextbox\" autocomplete=\"off\" class=\"form-control\" placeholder=\"Enter your last name:\" /></div>\n            <div id=\"helloMessage\">\n                <p>Hello <span class=\"name\"></span>!</p>\n                <p>Pardon me <span class=\"name\"></span>, but do you have any grey poupon?</p>\n            </div>\n        </div>\n    </div>\n</div>"
                    }
                },
                {
                    name:       "Click Counter",
                    example:
                    {
                        description:
`# Click Counter
In this example there is a \`readonly\` control that outputs the number of times the countClickButton control has been clicked.

This example uses the following overload of the launch method: \`root.atomic.launch(\`*\`cssSelector\`*\`, \`*\`viewAdapterDefinition\`*\`, \`*\`initCallback\`*\`)\` where the \`cssSelector\` parameter accepts a string argument containing a css selector that locates the root element of the view, the \`viewAdapterDefinition\` parameter accepts an object argument containing the [\`view adapter\` definition](https://github.com/TyreeJackson/atomic/wiki/AtomicJS-Documentation#view-adapter-definition-structure) and the \`initCallback\` parameter accepts a callback function that is called with the viewAdapter that has been launched.

The countClickButton has a function set to its \`onclick\` event which increments the \`clickCount\` property in the model.  It also has its \`enabled\` property bound to the \`clickCount\` property so that it is enabled when the value of the property is less than 3.

There is another \`readonly\` control that displays a message indicating when the button has been clicked too many times.  This control has its \`display\` property bound to the \`clickCount\` property so that it is displayed when the value of the property is greater than or equal to 3.

There is a resetClickCountButton which has a function set to its \`onclick\` event which resets the \`clickCount\` property in the model to zero when it is clicked.  When that happens the bindings that are subscribed to the \`clickCount\` property in the observed model are reevaluated and the view is updated.
`,
                        javascript:     "root.atomic.launch\n(\n    \"#example4\",\n    {\n        numberOfClicks:         { bind: \"clickCount\" },\n        countClickButton:\n        {\n            onclick:\n            function()\n            {\n                this.data(\"clickCount\", this.data(\"clickCount\")+1);\n            },\n            bind:       { enabled: { when: \"clickCount\", \"<\": 3 } }\n        },\n        tooManyClicksMessage:\n        {\n            bind:   { display: { when: \"clickCount\", \">=\": 3 } }\n        },\n        resetClickCountButton:\n        {\n            onclick:\n            function()\n            {\n                this.data(\"clickCount\",0);\n            }\n        }\n    },\n    function(adapter) { adapter.data(\"\", {clickCount:0}); }\n);",
                        css:            "",
                        html:           "<div id=\"example4\">\n    <div class=\"example\">\n        <div class=\"well form-group\">\n            <div>You've clicked <span id=\"numberOfClicks\"> </span> times</div>\n\n            <button id=\"countClickButton\" class=\"btn\">Click me</button>\n\n            <div id=\"tooManyClicksMessage\">\n                That's too many clicks! Please stop before you wear out your fingers.\n                <button id=\"resetClickCountButton\" class=\"btn\">Reset clicks</button>\n            </div>\n        </div>\n    </div>\n</div>"
                    }
                },
                {
                    name:       "Simple List",
                    example:
                    {
                        description:    "",
                        javascript:     "root.atomic.launch\n(\n    \"#example5\",\n    {\n        newItem:\n        {\n            bind:       { value: { to: \"newItem\", updateon:   [\"keydown\", \"keyup\", \"change\"] } },\n            onenter:    function(){this.parent.controls.addNewItemButton.click();}\n        },\n        addNewItemButton:\n        {\n            bind:       { enabled: \"newItem.length\" },\n            onclick:\n            function()\n            {\n                if (this.data(\"newItem.length\")>0 && this.data(\"items\").indexOf(this.data(\"newItem\"))==-1)\n                this.data(\"items\").push(this.data(\"newItem\"));\n                this.data(\"newItem\",\"\");\n            }\n        },\n        itemsList:\n        {\n            bind: { value: \"selected\", items: \"items\" }\n        }\n    },\n    function(adapter) { adapter.data(\"\", {newItem:\"\", items: [\"Alpha\",\"Beta\",\"Gamma\"]}); }\n);",
                        css:            "",
                        html:           "<div id=\"example5\">\n    <div class=\"example\">\n        <div class=\"well form-group\">\n            <div>\n                <div class=\"form-group\"><input id=\"newItem\" class=\"form-control\" /></div>\n                <button id=\"addNewItemButton\" type=\"button\" class=\"btn\">Add</button>\n                <p>Your items:</p>\n                <div class=\"form-group\">\n                    <select id=\"itemsList\" multiple=\"multiple\" class=\"form-control\"> </select>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"
                    }
                },
                {
                    name:       "A Better List",
                    example:
                    {
                        description:    "",
                        javascript:     "root.atomic.launch\n(\n    \"#example6\",\n    {\n        betterNewItem:\n        {\n            bind:       { value: { to: \"newItem\", updateon: [\"keydown\", \"keyup\", \"change\"] } },\n            onenter:    function(){this.parent.controls.betterAddNewItemButton.click();}\n        },\n        betterAddNewItemButton:\n        {\n            bind:       { enabled: \"newItem.length\" },\n            onclick:\n            function()\n            {\n                if (this.data(\"newItem.length\")>0 && this.data(\"items\").indexOf(this.data(\"newItem\"))==-1)\n                this.data(\"items\").push(this.data(\"newItem\"));\n                this.data(\"newItem\",\"\");\n            }\n        },\n        betterItemsList:\n        {\n            bind: { value: \"selected\", items: \"items\" }\n        },\n        removeItemButton:\n        {\n            bind:       { enabled: \"items.length\" },\n            onclick:    function(){this.data(\"items\").removeAll(this.parent.controls.betterItemsList.value());}\n        },\n        sortItemsButton:\n        {\n            bind:       { enabled: { when: \"items.length\", \">\": 1 } },\n            onclick:    function(){this.data(\"items\").sort();}\n        }\n    },\n    function(adapter) { adapter.data(\"\", {newItem:\"\", items: [\"Fries\",\"Eggs Benedict\",\"Ham\",\"Cheese\"]}); }\n);",
                        css:            "",
                        html:           "<div id=\"example6\">\n    <div class=\"example\">\n        <div class=\"well form-group\">\n            <div>\n                <div class=\"form-group\"><input id=\"betterNewItem\" class=\"form-control\" /></div>\n                <button id=\"betterAddNewItemButton\" type=\"button\" class=\"btn\">Add</button>\n                <p>Your items:</p>\n                <div class=\"form-group\">\n                    <select id=\"betterItemsList\" multiple=\"multiple\" class=\"form-control\"> </select>\n                </div>\n            </div>\n            <div>\n                <button id=\"removeItemButton\" class=\"btn\">Remove</button>\n                <button id=\"sortItemsButton\" class=\"btn\">Sort</button>\n            </div>\n        </div>\n    </div>\n</div>"
                    }
                },
                {
                    name:       "Control Types Demo",
                    example:
                    {
                        description:    "",
                        javascript:     "root.atomic.launch\n(\n    \"#example7\",\n    {\n        stringValueReadout:             { bind: \"stringValue\" },\n        urlValueReadout:                { bind: \"urlValue\" },\n        passwordValueReadout:           { bind: \"passwordValue\" },\n        booleanValueReadout:            { bind: \"booleanValue\" },\n        selectedValueReadout:           { bind: \"selectedValue\" },\n        multipleSelectedValuesReadout:  { bind: function(data){ return data(\"multipleSelectedValues\")&&data(\"multipleSelectedValues\").join();} },\n        radioSelectedOptionReadout:     { bind: \"radioSelectedValue\" },\n        imagePathValueReadout:          { bind: \"imageUrl\" },\n        onChangeTextboxControl:         { bind: \"stringValue\" },\n        onKeyStrokeTextboxControl:      { bind: { value: { to: \"stringValue\", updateon: [\"keydown\",\"keyup\",\"change\"] } } },\n        textAreaControl:                { bind: \"stringValue\" },\n        passwordControl:                { bind: \"passwordValue\" },\n        checkboxControl:                { bind: \"booleanValue\" },\n        singleDropdownListControl:      { bind: { value: \"selectedValue\",           items: \"items\" } },\n        multipleListControl:            { bind: { value: \"multipleSelectedValues\",  items: \"items\" } },\n        radioGroupControl:              { bind: { value: \"radioSelectedValue\",      items: \"items\" } },\n        buttonControl:                  { bind: \"stringValue\" },\n        readonlyControl:                { bind: \"stringValue\" },\n        linkControl:                    { bind: {value: \"stringValue\", href: \"urlValue\" }},\n        urlTextboxControl:              { bind: \"urlValue\" },\n        linkPanelControl:\n        {\n            bind: {href: \"urlValue\"},\n            controls:\n            {\n                panelReadonly:  { bind: \"stringValue\" },\n                panelUrl:       { bind: \"urlValue\" }\n            }\n        },\n        imageControl:                   { bind: \"imageUrl\" },\n        imagePathControl:               { bind: { value: \"imageUrl\",                items: { to: \"images\", text: \"title\", value: \"url\" } } }\n    },\n    function(adapter)\n    {\n        adapter.data(\"\", \n        {\n            stringValue:            \"Hello\", \n            urlValue:               \"https://atomicstack.com\",\n            passwordValue:          \"mypass\", \n            booleanValue:           true, \n            selectedValue:          \"Gamma\", \n            multipleSelectedValues: [\"Beta\"], \n            radioSelectedValue:     \"Alpha\",\n            imageUrl:               \"images/hammock_cat.jpg\",\n            items:                  [\"Alpha\",\"Beta\",\"Gamma\"],\n            images:\n            [\n                {\n                    title:  \"Hammock Cat\",\n                    url:    \"images/hammock_cat.jpg\"\n                },\n                {\n                    title:  \"Headphones\",\n                    url:    \"images/headphones.jpg\"\n                },\n                {\n                    title:  \"Nature Scene\",\n                    url:    \"images/nature_scene.png\"\n                }\n            ]\n        });\n    }\n);\n",
                        css:            ".col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {\n    float: left;\n  }\n  .col-md-12 {\n    width: 100%;\n  }\n  .col-md-11 {\n    width: 91.66666667%;\n  }\n  .col-md-10 {\n    width: 83.33333333%;\n  }\n  .col-md-9 {\n    width: 75%;\n  }\n  .col-md-8 {\n    width: 66.66666667%;\n  }\n  .col-md-7 {\n    width: 58.33333333%;\n  }\n  .col-md-6 {\n    width: 50%;\n  }\n  .col-md-5 {\n    width: 41.66666667%;\n  }\n  .col-md-4 {\n    width: 33.33333333%;\n  }\n  .col-md-3 {\n    width: 25%;\n  }\n  .col-md-2 {\n    width: 16.66666667%;\n  }\n  .col-md-1 {\n    width: 8.33333333%;\n  }\n  .col-md-pull-12 {\n    right: 100%;\n  }\n  .col-md-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-md-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-md-pull-9 {\n    right: 75%;\n  }\n  .col-md-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-md-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-md-pull-6 {\n    right: 50%;\n  }\n  .col-md-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-md-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-md-pull-3 {\n    right: 25%;\n  }\n  .col-md-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-md-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-md-pull-0 {\n    right: auto;\n  }\n  .col-md-push-12 {\n    left: 100%;\n  }\n  .col-md-push-11 {\n    left: 91.66666667%;\n  }\n  .col-md-push-10 {\n    left: 83.33333333%;\n  }\n  .col-md-push-9 {\n    left: 75%;\n  }\n  .col-md-push-8 {\n    left: 66.66666667%;\n  }\n  .col-md-push-7 {\n    left: 58.33333333%;\n  }\n  .col-md-push-6 {\n    left: 50%;\n  }\n  .col-md-push-5 {\n    left: 41.66666667%;\n  }\n  .col-md-push-4 {\n    left: 33.33333333%;\n  }\n  .col-md-push-3 {\n    left: 25%;\n  }\n  .col-md-push-2 {\n    left: 16.66666667%;\n  }\n  .col-md-push-1 {\n    left: 8.33333333%;\n  }\n  .col-md-push-0 {\n    left: auto;\n  }\n  .col-md-offset-12 {\n    margin-left: 100%;\n  }\n  .col-md-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-md-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-md-offset-9 {\n    margin-left: 75%;\n  }\n  .col-md-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-md-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-md-offset-6 {\n    margin-left: 50%;\n  }\n  .col-md-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-md-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-md-offset-3 {\n    margin-left: 25%;\n  }\n  .col-md-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-md-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-md-offset-0 {\n    margin-left: 0%;\n  }",
                        html:           "<div id=\"example7\">\n    <div class=\"example\">\n        <div class=\"well\">\n            <div class=\"row\">\n                <div class=\"col-md-8\">\n                    <h3>HTML controls</h3>\n                    <table class=\"table table-bordered\">\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Text value (updates on change):</td>\n                            <td class=\"table-cell\"><input id=\"onChangeTextboxControl\" /></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Text value (updates on keystroke):</td>\n                            <td class=\"table-cell\"><input id=\"onKeyStrokeTextboxControl\" /></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Text value (multi-line):</td>\n                            <td class=\"table-cell\"><textarea id=\"textAreaControl\"> </textarea></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Password:</td>\n                            <td class=\"table-cell\"><input id=\"passwordControl\" type=\"password\" /></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Checkbox:</td>\n                            <td class=\"table-cell\"><input id=\"checkboxControl\" type=\"checkbox\" class=\"checkbox\" /></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Drop-down list:</td>\n                            <td class=\"table-cell\"><select id=\"singleDropdownListControl\"></select></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Multi-select drop-down list:</td>\n                            <td class=\"table-cell\"><select id=\"multipleListControl\" multiple=\"multiple\"></select></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Radio buttons:</td>\n                            <td class=\"table-cell\">\n                                <radiogroup id=\"radioGroupControl\">\n                                    <radiogroupitem class=\"radio-inline\"><input type=\"radio\" /><label></label></radiogroupitem>\n                                </radiogroup>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Buttons:</td>\n                            <td class=\"table-cell\">\n                                <button id=\"buttonControl\"></button>\n\n                            </td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Readonly:</td>\n                            <td class=\"table-cell\"><span id=\"readonlyControl\"></a></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Link:</td>\n                            <td class=\"table-cell\"><a id=\"linkControl\"></a><br/><input id=\"urlTextboxControl\" /></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Link Panel:</td>\n                            <td class=\"table-cell\"><a id=\"linkPanelControl\"><span id=\"panelReadonly\"></span> [ <span id=\"panelUrl\"></span> ]</a></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Images:</td>\n                            <td class=\"table-cell\">\n                                <img id=\"imageControl\" /><br/>\n                                <radiogroup id=\"imagePathControl\">\n                                    <radiogroupitem class=\"radio-inline\"><input type=\"radio\" /><label></label></radiogroupitem>\n                                </radiogroup>\n                            </td>\n                        </tr>\n                    </table>\n                </div>\n                <div class=\"col-md-4\">\n                    <h3>What's in the model?</h3>\n                    <table class=\"table table-bordered\">\n                        <tr>\n                            <td class=\"table-cell\">Text value:</td>\n                            <td class=\"table-cell\" id=\"stringValueReadout\"></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Url value:</td>\n                            <td class=\"table-cell\" id=\"urlValueReadout\"></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Password:</td>\n                            <td class=\"table-cell\" id=\"passwordValueReadout\"></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Bool value:</td>\n                            <td class=\"table-cell\" id=\"booleanValueReadout\"></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Selected option:</td>\n                            <td class=\"table-cell\" id=\"selectedValueReadout\"></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Multi-selected options:</td>\n                            <td class=\"table-cell\" id=\"multipleSelectedValuesReadout\"></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Radio button selection:</td>\n                            <td class=\"table-cell\" id=\"radioSelectedOptionReadout\"></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Image path value:</td>\n                            <td class=\"table-cell\" id=\"imagePathValueReadout\"></td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"
                    }
                },
                {
                    name:       "Working with Lists",
                    example:
                    {
                        description:    "",
                        javascript:     "root.atomic.launch\n(\n    \"#example8\",\n    {\n        peopleList:\n        {\n            bind:   \"people\",\n            repeat:\n            {\n                peopleListItemTemplate:\n                {\n                    getKey:     function(data){return \"person-\"+this.index;},\n                    controls:\n                    {\n                        personNameLabel:    { bind:     \"name\" },\n                        childCountLabel:    { bind:     \"children.length\" },\n                        addChildLink:       { onclick:  function(){this.data(\"children\").push(\"New Child\");} },\n                        sortChildrenLink:   { onclick:  function(){this.data(\"children\").sort();}},\n                        renderTimeSection:  \n                        {\n                            bind:       { display: \"...showRenderTimes\" },\n                            controls:\n                            {\n                                renderTimeLabel:    { bind:     function(data){return new Date().getSeconds();} }\n                            }\n                        },\n                        childList:\n                        {\n                            bind:   \"children\",\n                            repeat:\n                            {\n                                childListItemTemplate:\n                                {\n                                    getKey:     function(data){return \"person-\"+this.parent.parent.data(\"name\")+\"-child-\"+this.index;},\n                                    controls:\n                                    {\n                                        childNameLabel:         { bind: \"\" },\n                                        childRenderTimeSection: { bind: { display: \"...showRenderTimes\" } },\n                                        childRenderTimeLabel:   { bind: function(data){return new Date().getSeconds();} },\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        showRenderTimesCheckbox:    { bind: \"showRenderTimes\" }\n    },\n    function(adapter)\n    {\n        adapter.data\n        (\"\",\n        {\n            showRenderTimes:    false,\n            people:\n            [\n                {name:\"Anabelle\",   children: [\"Arnie\",\"Anders\",\"Apple\"]},\n                {name:\"Bertie\",     children: [\"Boutros-Boutros\",\"Brianna\",\"Barbie\",\"Bee-bop\"]},\n                {name:\"Charles\",    children: [\"Cayenne\",\"Cleopatra\"]}\n            ]\n        });\n    }\n);",
                        css:            "a { cursor: pointer; }",
                        html:           "<div id=\"example8\">\n    <style type=\"text/css\">\n        .renderTime { color: #777; font-style: italic; font-size: 0.8em; }\n    </style>\n    <div class=\"example\">\n        <div class=\"well\">\n            <h2>People</h2>\n            <ul id=\"peopleList\">\n                <li id=\"peopleListItemTemplate\">\n                    <div>\n                        <span id=\"personNameLabel\"> </span> has <span id=\"childCountLabel\"> </span> children:\n                        <a id=\"addChildLink\" class=\"clickable\">Add child</a>\n                        <a id=\"sortChildrenLink\" class=\"clickable\">Sort Children</a>\n                        <span id=\"renderTimeSection\" class=\"renderTime\">\n                            (person rendered at <span id=\"renderTimeLabel\"> </span>)\n                        </span>\n                    </div>\n                    <ul id=\"childList\">\n                        <li id=\"childListItemTemplate\">\n                            <span id=\"childNameLabel\"> </span>\n                            <span id=\"childRenderTimeSection\" class=\"renderTime\">\n                                (child rendered at <span id=\"childRenderTimeLabel\"> </span>)\n                            </span>\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n            <label><input id=\"showRenderTimesCheckbox\" type='checkbox' /> Show render times</label> \n        </div>\n    </div>\n</div>"
                    }
                },
                {
                    name:       "Hello Friend - container demo",
                    example:
                    {
                        description:    "",
                        javascript:     "root.atomic.launch\n(\n    \"#example9\",\n    {\n        inputPanel:\n        {\n            bind:       \"input\",\n            controls:\n            {\n                firstNameTextbox9:\n                {\n                    focused:    true,\n                    bind:       { value: { to: \"firstName\", updateon: [\"keydown\", \"keyup\", \"change\"] } },\n                    onescape:   function(){this.value(\"\"); }\n                },\n                lastNameTextbox9:\n                {\n                    bind:       { value: { to: \"lastName\", updateon: [\"keydown\", \"keyup\", \"change\"] } },\n                    onescape:   function(){this.value(\"\");}\n                }\n            }\n        },\n        otherNameTextbox9:\n        {\n            bind:       { value: { to: \"otherName\", updateon: [\"keydown\", \"keyup\", \"change\"] } },\n            onescape:   function(){this.value(\"\");}\n        },\n        helloMessage9:\n        {\n            bind:       { value: \"input\", display: function(){return this.data.hasValue(\"input.firstName\") || this.data.hasValue(\"input.lastName\");} },\n            controls:\n            {\n                nameLabels:\n                {\n                    selector:   \".name\",\n                    bind:       function(data){return (this.data(\"firstName\")||\"\") + (this.data(\"firstName\") && this.data(\"lastName\")?\" \":\"\") + (this.data(\"lastName\")||\"\");}\n                }\n            }\n        }\n    }\n);\n",
                        css:            "",
                        html:           "<div id=\"example9\">\n    <div class=\"example\">\n        <div class=\"well form-group\">\n            <div id=\"inputPanel\" class=\"well\">\n                <div><input id=\"firstNameTextbox9\" autocomplete=\"off\" class=\"form-control\" placeholder=\"Enter your first name:\" /></div>\n                <div><input id=\"lastNameTextbox9\" autocomplete=\"off\" class=\"form-control\" placeholder=\"Enter your last name:\" /></div>\n            </div>\n            <div><input id=\"otherNameTextbox9\" autocomplete=\"off\" class=\"form-control\" placeholder=\"Enter your other name:\" /></div>\n            <div id=\"helloMessage9\">\n                <p>Hello <span class=\"name\"></span>!</p>\n            </div>\n        </div>\n    </div>\n</div>"
                    }
                },
                {
                    name:       "A Better List - control types demo",
                    example:
                    {
                        description:    "",
                        javascript:     "root.atomic.launch\n(\n    \"#example10\",\n    {\n        example10container:\n        {\n            type:       \"panel\",\n            classes:    [\"example\", \"well\"],\n            controls:\n            {\n                well:\n                {\n                    selector:   \".well\",\n                    type:       \"panel\",\n                    classes:    [\"well\", \"form-group\"],\n                    controls:\n                    {\n                        betterNewItem10:\n                        {\n                            type:       \"input\",\n                            classes:    [\"form-control\"],\n                            bind:       { value: { to: \"newItem\", updateon: [\"keydown\", \"keyup\", \"change\"] } },\n                            onenter:    function(){this.parent.controls.betterAddNewItemButton10.click();}\n                        },\n                        betterAddNewItemButton10:\n                        {\n                            type:       \"button\",\n                            classes:    [\"btn\"],\n                            value:      \"Add\",\n                            bind:       { enabled: \"newItem.length\" },\n                            onclick:\n                            function()\n                            {\n                                if (this.data(\"newItem.length\")>0 && this.data(\"items\").indexOf(this.data(\"newItem\"))==-1)\n                                this.data(\"items\").push(this.data(\"newItem\"));\n                                this.data(\"newItem\",\"\");\n                            }\n                        }\n                    }\n                },\n                itemsTitle:\n                {\n                    type:   \"readonly\",\n                    value:  \"Your items:\"\n                },\n                formgroup:\n                {\n                    selector:   \".listContainer\",\n                    type:       \"panel\",\n                    classes:    [\"listContainer\", \"well\", \"form-group\"],\n                    controls:\n                    {\n                        betterItemsList10:\n                        {\n                            type:       \"multiselect\",\n                            classes:    [\"form-control\"],\n                            bind:       { value: \"selected\", items: \"items\" }\n                        },\n                        listButtons:\n                        {\n                            selector:   \".listButtons\",\n                            type:       \"panel\",\n                            controls:\n                            {\n                                removeItemButton10:\n                                {\n                                    type:       \"button\",\n                                    classes:    [\"btn\"],\n                                    value:      \"Remove\",\n                                    bind:       {enabled: \"items.length\"},\n                                    onclick:    function(){this.data(\"items\").removeAll(this.parent.parent.controls.betterItemsList10.value());}\n                                },\n                                sortItemsButton:\n                                {\n                                    type:       \"button\",\n                                    classes:    [\"btn\"],\n                                    value:      \"Sort\",\n                                    bind:       { enabled: { when: \"items.length\", \">\": 1 } },\n                                    onclick:    function(){this.data(\"items\").sort();}\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    function(adapter) { adapter.data(\"\", {newItem:\"\", items: [\"Fries\",\"Eggs Benedict\",\"Ham\",\"Cheese\"]}); }\n);\n",
                        css:            "",
                        html:           "<div id=\"example10\">\n    <div id=\"example10container\" class=\"example\">\n    </div>\n</div>"
                    }
                },
                {
                    name:       "A really simple Todo",
                    example:
                    {
                        description:    "",
                        javascript:     "root.atomic.launch\n(\n    \"#example11\",\n    {\n        newTodo:\n        {\n            bind:       {value: {to: \"newTodo\", updateon:[\"keyup\", \"change\"]}}, \n            onenter:    function(){this.parent.controls.addTodo.click();}\n        },\n        addTodo:        {onclick: function()\n        {\n            this.data(\"todos\").push({description: this.data(\"newTodo\"), done: false});\n            this.data(\"newTodo\", \"\");\n        }},\n        todoList:\n        {\n            bind:   \"todos\",\n            repeat:\n            {\n                todoListItem:\n                {\n                    controls:\n                    {\n                        todoDone:           {bind: {value: \"done\", id: function(item){return \"todo-\"+item(\"description\");} }},\n                        todoDescription:    {bind: {value: \"description\", for: function(item){return \"todo-\"+item(\"description\");}, classes: {strikethrough: \"done\"}}},\n                        removeTodo:         {onclick: function()\n                        {\n                            this.data(\"...todos\").remove(this.data());\n                        }}\n                    }\n                }\n            }\n        }\n    },\n    function(adapter) { adapter.data(\"todos\", []); }\n);\n",
                        css:            "",
                        html:           "<div id=\"example11\">\n    <div class=\"example\">\n        <style>.strikethrough{text-decoration: line-through;}</style>\n        <div class=\"well form-group\">\n            <h1 id=\"example11title\"></h1>\n            <fieldset>\n                <input id=\"newTodo\" type=\"text\">\n                <button id=\"addTodo\">Add Todo</button>\n            </fieldset>\n            <ul id=\"todoList\">\n                <li id=\"todoListItem\">\n                    <input id=\"todoDone\" type=\"checkbox\">\n                    <label id=\"todoDescription\"></label>\n                    <button id=\"removeTodo\">Remove</button>\n                </li>\n            </ul>\n        </div>\n    </div>\n</div>"
                    }
                },
                {
                    name:       "Composite Controls",
                    example:
                    {
                        description:    "",
                        javascript:     "root.atomic.ready(function(atomic)\n{\n    var textboxControl  = atomic.viewAdapterFactory.createFactory\n    (\n        {\n            controls:\n            {\n                label:\n                {\n                    selector:   \".textbox-label\"\n                },\n                input:\n                {\n                    selector:   \".textbox-input\",\n                    onescape:   function(){ this.value(\"\"); }\n                }\n            },\n            properties:\n            {\n                label:  {get: function(){return this.controls.label.value();}, set: function(value){this.controls.label.value(value);}},\n                value:  function(){return this.controls.input.value}\n            },\n            extensions:\n            [{\n                initializers:\n                {\n                    label:  function(adapter, value){adapter.label = value;}\n                }\n            }]\n\n        },\n        \"#example12 .textbox-field-control\"\n    );\n    var readonlyControl = atomic.viewAdapterFactory.createFactory\n    (\n        {\n            controls:\n            {\n                label:\n                {\n                    selector:   \".readonly-label\"\n                },\n                readout:\n                {\n                    selector:   \".readonly-readout\"\n                }\n            },\n            properties:\n            {\n                label:  {get: function(){return this.controls.label.value();}, set: function(value){this.controls.label.value(value);}},\n                value:  function(){return this.controls.readout.value}\n            },\n            extensions:\n            [{\n                initializers:\n                {\n                    label:  function(adapter, value){adapter.label = value;}\n                }\n            }]\n\n        },\n        \"#example12 .readonly-field-control\"\n    );\n    atomic.viewAdapterFactory.launch\n    (\n        \"#example12\",\n        {\n            example12container:\n            {\n                controls:\n                {\n                    firstName:\n                    {\n                        factory:    textboxControl, \n                        label:      \"First Name:\", \n                        bind:       {value: {to: \"firstName\", updateon: [\"keyup\", \"change\"] } }\n                    },\n                    lastName:\n                    {\n                        factory:    textboxControl, \n                        label:      \"Last Name:\", \n                        bind:       {value: {to: \"lastName\", updateon: [\"keyup\", \"change\"] } }\n                    },\n                    fullName:\n                    {\n                        factory:    readonlyControl, \n                        label:      \"Full Name:\", \n                        bind: \n                        {\n                            value:      function()\n                            {\n                                return (this.data(\"firstName\")||\"\") + \" \" + (this.data(\"lastName\")||\"\");\n                            }, \n                            display:    function()\n                            {\n                                return (this.data(\"firstName\")||\"\").length > 0\n                                ||\n                                (this.data(\"lastName\")||\"\").length > 0;\n                            } \n                        }\n                    }\n                }\n            }\n        }\n    );\n});",
                        css:            "",
                        html:           "<div id=\"example12\">\n    <div class=\"example\">\n        <div id=\"example12container\" class=\"well form-group\">\n            <div class=\"textbox-field-control\">\n                <label class=\"textbox-label\"></label>\n                <input class=\"textbox-input\">\n            </div>\n            <div class=\"readonly-field-control\">\n                <label class=\"readonly-label\"></label>\n                <span class=\"readonly-readout\"></span>\n            </div>\n        </div>\n    </div>\n</div>"
                    }
                },
                {
                    name:       "Control Bindings",
                    example:
                    {
                        description:    "",
                        javascript:     "root.atomic.launch\n(\n    \"#example13\",\n    {\n        readonlyWithAttributesControl:          { bind: { attributes: { to: \"settings\", root: \"settings\" } } },\n        disabledExampleControl:                 { bind: { disabled: \"settings.disabled\" } },\n        displayExampleControl:                  { bind: { display: \"settings.display\" } },\n        enabledExampleControl:                  { bind: { enabled: \"settings.enabled\" } },\n        labelForControl:                        { bind: { for: \"settings.for\" } },\n        dynamicIdControl:                       { bind: { id: \"settings.id\" } },\n        tooltipControl:                         { bind: { tooltip: \"settings.tooltip\" } },\n        valueControl:                           { bind: { value: \"settings.value\" } },\n        classesControl:\n        {\n            bind:\n            {\n                classes:\n                {\n                    addBorder:  { when: \"classes.addBorder\" },                      // default operation is a bool check\n                    addItalics: { when: \"classes.addItalics\" }, \n                    addBold:    { when: \"classes.addBold\",      equals: true },     // alternative operation equals\n                    addPadding: { when: \"classes.addPadding\",   notequals: false }  // alternative operation notequals\n                }\n            }\n        },\n        altControl:                             { bind: { alt: \"settings.alt\" } },\n\n\n\n\n        disabledCheckbox:                       { bind: \"settings.disabled\" },\n        displayCheckbox:                        { bind: \"settings.display\" },\n        enabledCheckbox:                        { bind: \"settings.enabled\" },\n        forList:                                { bind: { value: \"settings.for\",    items: \"controls\" } },\n        idTextbox:                              { bind: { value: { to: \"settings.id\",        updateon: [\"keydown\", \"keyup\", \"change\"] } } },\n        tooltipTextbox:                         { bind: { value: { to: \"settings.tooltip\",   updateon: [\"keydown\", \"keyup\", \"change\"] } } },\n        valueTextbox:                           { bind: { value: { to: \"settings.value\",     updateon: [\"keydown\", \"keyup\", \"change\"] } } },\n        addBorderCheckbox:                      { bind: \"classes.addBorder\" },\n        addBoldCheckbox:                        { bind: \"classes.addBold\" },\n        addItalicsCheckbox:                     { bind: \"classes.addItalics\" },\n        addPaddingCheckbox:                     { bind: \"classes.addPadding\" },\n        altTextbox:                             { bind: { value: { to: \"settings.alt\",   updateon: [\"keydown\", \"keyup\", \"change\"] } } },\n\n\n\n\n        /* BEGIN: these controls are here to display the contents of the view */\n\n        readonlyWithAttributesControlWrapper:   {},\n        disabledExampleControlWrapper:          {},\n        displayExampleControlWrapper:           {},\n        enabledExampleControlWrapper:           {},\n        labelForControlWrapper:                 {},\n        dynamicIdControlWrapper:                {},\n        tooltipControlWrapper:                  {},\n        valueControlWrapper:                    {},\n        classesControlWrapper:                  {},\n        altControlWrapper:                      {},\n        readonlyWithAttibutesControlReadout:    { bind: { value: { to: function(item){item(\"settings\"); return this.parent.controls.readonlyWithAttributesControlWrapper.value().replace(/\\</g, \"&lt;\").replace(/\\>/g, \"&gt;\");}, root: \"settings\" } } },\n        disabledExampleControlReadout:          { bind: { value: { to: function(item){item(\"settings.disabled\"); return this.parent.controls.disabledExampleControlWrapper.value().replace(/\\</g, \"&lt;\").replace(/\\>/g, \"&gt;\");} } } },\n        displayExampleControlReadout:           { bind: { value: { to: function(item){item(\"settings.display\"); return this.parent.controls.displayExampleControlWrapper.value().replace(/\\</g, \"&lt;\").replace(/\\>/g, \"&gt;\");} } } },\n        enabledExampleControlReadout:           { bind: { value: { to: function(item){item(\"settings.enabled\"); return this.parent.controls.enabledExampleControlWrapper.value().replace(/\\</g, \"&lt;\").replace(/\\>/g, \"&gt;\");} } } },\n        labelForControlReadout:                 { bind: { value: { to: function(item){item(\"settings.for\"); return this.parent.controls.labelForControlWrapper.value().replace(/\\</g, \"&lt;\").replace(/\\>/g, \"&gt;\");} } } },\n        dynamicIdControlReadout:                { bind: { value: { to: function(item){item(\"settings.id\"); return this.parent.controls.dynamicIdControlWrapper.value().replace(/\\</g, \"&lt;\").replace(/\\>/g, \"&gt;\");} } } },\n        tooltipControlReadout:                  { bind: { value: { to: function(item){item(\"settings.tooltip\"); return this.parent.controls.tooltipControlWrapper.value().replace(/\\</g, \"&lt;\").replace(/\\>/g, \"&gt;\");} } } },\n        valueControlReadout:                    { bind: { value: { to: function(item){item(\"settings.value\"); return this.parent.controls.valueControlWrapper.value().replace(/\\</g, \"&lt;\").replace(/\\>/g, \"&gt;\");} } } },\n        classesControlReadout:                  { bind: { value: { to: function(item){item(\"classes\"); return this.parent.controls.classesControlWrapper.value().replace(/\\</g, \"&lt;\").replace(/\\>/g, \"&gt;\");}, root: \"classes\" } } },\n        altControlReadout:                      { bind: { value: { to: function(item){item(\"settings.alt\"); return this.parent.controls.altControlWrapper.value().replace(/\\</g, \"&lt;\").replace(/\\>/g, \"&gt;\");} } } },\n\n        /* END: these controls are here to display the contents of the view */\n\n        example13model:                         { bind: { value: { to: function(){return JSON.stringify(this.data(), null, '    ');}, root: \"\" } } }\n    },\n    function(adapter)\n    {\n        adapter.data(\"\", \n        {\n            settings:\n            {\n                disabled:       false,\n                display:        true,\n                enabled:        true,\n                for:            \"disabledExampleControl\",\n                id:             \"someUniqueId\",\n                tooltip:        \"This is a tooltip!\",\n                value:          \"A value fit for a control\",\n                alt:            \"Depending on your browser this text might appear when the value property of the image has not been set or bound or is non existent.\"\n            },\n            classes:\n            {\n                addBorder:      false,\n                addBold:        false,\n                addItalics:     false,\n                addPadding:     false\n            },\n            controls:   [\"disabledExampleControl\", \"displayExampleControl\", \"enabledExampleControl\"]\n        });\n    }\n);\n",
                        css:            ".col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {\n    float: left;\n  }\n  .col-md-12 {\n    width: 100%;\n  }\n  .col-md-11 {\n    width: 91.66666667%;\n  }\n  .col-md-10 {\n    width: 83.33333333%;\n  }\n  .col-md-9 {\n    width: 75%;\n  }\n  .col-md-8 {\n    width: 66.66666667%;\n  }\n  .col-md-7 {\n    width: 58.33333333%;\n  }\n  .col-md-6 {\n    width: 50%;\n  }\n  .col-md-5 {\n    width: 41.66666667%;\n  }\n  .col-md-4 {\n    width: 33.33333333%;\n  }\n  .col-md-3 {\n    width: 25%;\n  }\n  .col-md-2 {\n    width: 16.66666667%;\n  }\n  .col-md-1 {\n    width: 8.33333333%;\n  }\n  .col-md-pull-12 {\n    right: 100%;\n  }\n  .col-md-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-md-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-md-pull-9 {\n    right: 75%;\n  }\n  .col-md-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-md-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-md-pull-6 {\n    right: 50%;\n  }\n  .col-md-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-md-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-md-pull-3 {\n    right: 25%;\n  }\n  .col-md-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-md-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-md-pull-0 {\n    right: auto;\n  }\n  .col-md-push-12 {\n    left: 100%;\n  }\n  .col-md-push-11 {\n    left: 91.66666667%;\n  }\n  .col-md-push-10 {\n    left: 83.33333333%;\n  }\n  .col-md-push-9 {\n    left: 75%;\n  }\n  .col-md-push-8 {\n    left: 66.66666667%;\n  }\n  .col-md-push-7 {\n    left: 58.33333333%;\n  }\n  .col-md-push-6 {\n    left: 50%;\n  }\n  .col-md-push-5 {\n    left: 41.66666667%;\n  }\n  .col-md-push-4 {\n    left: 33.33333333%;\n  }\n  .col-md-push-3 {\n    left: 25%;\n  }\n  .col-md-push-2 {\n    left: 16.66666667%;\n  }\n  .col-md-push-1 {\n    left: 8.33333333%;\n  }\n  .col-md-push-0 {\n    left: auto;\n  }\n  .col-md-offset-12 {\n    margin-left: 100%;\n  }\n  .col-md-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-md-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-md-offset-9 {\n    margin-left: 75%;\n  }\n  .col-md-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-md-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-md-offset-6 {\n    margin-left: 50%;\n  }\n  .col-md-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-md-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-md-offset-3 {\n    margin-left: 25%;\n  }\n  .col-md-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-md-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-md-offset-0 {\n    margin-left: 0%;\n  }\ninput[type=\"checkbox\"] { cursor: pointer; }\n.addBorder  { border: solid 2px black; }\n.addBold    { font-weight: bold; }\n.addItalics { font-style: italic; }\n.addPadding { padding: 20px; }\n",
                        html:           "<div id=\"example13\">\n    <div class=\"example\">\n        <div class=\"well\">\n            <div class=\"row\">\n                <div class=\"col-md-8\">\n                    <h3>Control bindings</h3>\n                    <table class=\"table table-bordered\">\n                        <tr>\n                            <td class=\"table-cell\">Readonly with attributes:</td>\n                            <td class=\"table-cell\" id=\"readonlyWithAttributesControlWrapper\"><span id=\"readonlyWithAttributesControl\">This control has attributes</span></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Text control (reacts to disabled):</td>\n                            <td class=\"table-cell\" id=\"disabledExampleControlWrapper\"><input id=\"disabledExampleControl\" /></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Text control (reacts to display):</td>\n                            <td class=\"table-cell\" id=\"displayExampleControlWrapper\"><input id=\"displayExampleControl\" /></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Text control (reacts to enabled):</td>\n                            <td class=\"table-cell\" id=\"enabledExampleControlWrapper\"><input id=\"enabledExampleControl\" /></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Label control (reacts to for):</td>\n                            <td class=\"table-cell\" id=\"labelForControlWrapper\"><label id=\"labelForControl\">This label can be set for another element.<br/>Clicking on this label will set focus to that control.</label></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Panel control (reacts to id):</td>\n                            <td class=\"table-cell\" id=\"dynamicIdControlWrapper\"><div id=\"dynamicIdControl\">The id of this panel changes dynamically</div></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Panel control (reacts to tooltip):</td>\n                            <td class=\"table-cell\" id=\"tooltipControlWrapper\"><div id=\"tooltipControl\">The tooltip of this panel changes dynamically.<br/>Try hovering the mouse over it.</div></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Textarea control (reacts to value):</td>\n                            <td class=\"table-cell\" id=\"valueControlWrapper\"><textarea id=\"valueControl\"></textarea></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Panel control (reacts to classes):</td>\n                            <td class=\"table-cell\" id=\"classesControlWrapper\"><div id=\"classesControl\">The classes applied to this panel changes dynamically.</div></td>\n                        </tr>\n                        <tr>\n                            <td class=\"table-cell\">Image control (reacts to alt):</td>\n                            <td class=\"table-cell\" id=\"altControlWrapper\"><img id=\"altControl\" src=\"nonexistent.png\" width=\"150\" height=\"60\" /></td>\n                        </tr>\n                    </table>\n                </div>\n                <div class=\"col-md-4\">\n                    <h3>Settings</h3>\n                    <table class=\"table table-bordered\">\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Disabled:</td>\n                            <td class=\"table-cell\"><input id=\"disabledCheckbox\" type=\"checkbox\" class=\"checkbox\" /></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Display:</td>\n                            <td class=\"table-cell\"><input id=\"displayCheckbox\" type=\"checkbox\" class=\"checkbox\" /></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Enabled:</td>\n                            <td class=\"table-cell\"><input id=\"enabledCheckbox\" type=\"checkbox\" class=\"checkbox\" /></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">For:</td>\n                            <td class=\"table-cell\"><select id=\"forList\"></select></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Id:</td>\n                            <td class=\"table-cell\"><input id=\"idTextbox\" /></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Tooltip:</td>\n                            <td class=\"table-cell\"><input id=\"tooltipTextbox\" /></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Value:</td>\n                            <td class=\"table-cell\"><input id=\"valueTextbox\" /></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Add Border:</td>\n                            <td class=\"table-cell\"><input id=\"addBorderCheckbox\" type=\"checkbox\" class=\"checkbox\" /></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Add Bold:</td>\n                            <td class=\"table-cell\"><input id=\"addBoldCheckbox\" type=\"checkbox\" class=\"checkbox\" /></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Add Italics:</td>\n                            <td class=\"table-cell\"><input id=\"addItalicsCheckbox\" type=\"checkbox\" class=\"checkbox\" /></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Add Padding:</td>\n                            <td class=\"table-cell\"><input id=\"addPaddingCheckbox\" type=\"checkbox\" class=\"checkbox\" /></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Alt:</td>\n                            <td class=\"table-cell\"><input id=\"altTextbox\" /></td>\n                        </tr>\n                    </table>\n                </div>\n                <div class=\"col-md-12\">\n                    <h3>What's in the view?</h3>\n                    <table class=\"table table-bordered\">\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Readonly with attributes:</td>\n                            <td class=\"table-cell\" id=\"readonlyWithAttibutesControlReadout\"></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Text control (reacts to disabled):</td>\n                            <td class=\"table-cell\" id=\"disabledExampleControlReadout\"></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Text control (reacts to display):</td>\n                            <td class=\"table-cell\" id=\"displayExampleControlReadout\"></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Text control (reacts to enabled):</td>\n                            <td class=\"table-cell\" id=\"enabledExampleControlReadout\"></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Label control (reacts to for):</td>\n                            <td class=\"table-cell\" id=\"labelForControlReadout\"></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Panel control (reacts to id):</td>\n                            <td class=\"table-cell\" id=\"dynamicIdControlReadout\"></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Panel control (reacts to tooltip):</td>\n                            <td class=\"table-cell\" id=\"tooltipControlReadout\"></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Textarea control (reacts to value):</td>\n                            <td class=\"table-cell\" id=\"valueControlReadout\"></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Panel control (reacts to classes):</td>\n                            <td class=\"table-cell\" id=\"classesControlReadout\"></td>\n                        </tr>\n                        <tr class=\"table-row\">\n                            <td class=\"table-cell\">Image control (reacts to alt):</td>\n                            <td class=\"table-cell\" id=\"altControlReadout\"></td>\n                        </tr>\n                    </table>\n                </div>\n            </div>\n        </div>\n    </div>\n    <figure class=\"highlight\">\n        <h2>Model</h2>\n        <pre>\n<code id=\"example13model\" class=\"language-javascript\"></code>\n        </pre>\n    </figure>\n</div>"
                    }
                },
                {
                    "name":     "Text Field Demo",
                    "example":
                    {
                        description:    "",
                        javascript:     "root.atomic.launch\n(\n    {\n        text1:  { bind: \"value\" },\n        text2:  { bind: { value: \"value\" } },\n        text3:  { bind: { value: { to: \"value\" } } }\n    },\n    function(adapter)\n    {\n        adapter.data(\"\", {value: \"Hello World!\"})\n    }\n);",
                        css:            "input { display: block; }",
                        html:           "<input id=\"text1\" type=\"text\" />\n<input id=\"text2\" type=\"text\" />\n<input id=\"text3\" type=\"text\" />"
                    }
                },
                {
                    name:       "TodoMVC",
                    example: 
                    {
                        description:
` # TodoMVC

This is an implementation of the well known TodoMVC demo from [TodoMVC.com](http://todomvc.com) built using AtomicJS.

This is a merged copy of the official AtomicJS TodoMVC demo and is composed using the dependency injection method of launching AtomicJS.  You can see the composition root starting near line 287 in the JavaScript for this playground.

This playground features a fully implemented \`AppView\`, \`Controller\` and service \`Proxy\` which uses \`localStorage\` to persist the data for the application.
`,
                        javascript:     "!function()\n{\"use strict\";root.define(\"todoMVC.appView\",\nfunction()\n{return function todoMVCAppView()\n{\n    function getActiveTodos(todos)\n    {\n        var activeTodos = [];\n        for(var counter=0;counter<todos.length;counter++) if (!todos[counter].completed) activeTodos.push(todos[counter]);\n        return activeTodos;\n    }\n    var adapterDefinition   =\n    {\n        controls:\n        {\n            newTodoTextbox:\n            {\n                onenter:\n                function()\n                {\n                    if (this.value().trim() !== \"\") this.root.on.addNewTodo(this.value().trim());\n                    this.value(\"\");\n                }\n            },\n            todosView:\n            {\n                controls:\n                {\n                    toggleAllCompleted: \n                    {\n                        bind:\n                        {\n                            value:\n                            {\n                                to:\n                                {\n                                    get:    function(data)\n                                    {\n                                        var items           = data();\n                                        var allCompleted    = true;\n                                        for(var itemCounter=0;itemCounter<items.length;itemCounter++)\n                                        allCompleted = allCompleted && (items[itemCounter].completed||false);\n                                        return allCompleted;\n                                    },\n                                    set:    function(data, value)\n                                    {\n                                        this.root.on.toggleAllCompleted(value);\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    todoList:\n                    {\n                        repeat:\n                        {\n                            todoListItemTemplate:\n                            {\n                                getKey:     function(item){return \"todoListItem-\"+item().id},\n                                bind:       { classes: { completed:  \"completed\" } },\n                                controls:\n                                {\n                                    toggleCompletedCheckbox:\n                                    {\n                                        bind:       \"completed\",\n                                        onchange:\n                                        function()\n                                        {\n                                            this.root.on.saveTodo(this.data());\n                                        } \n                                    },\n                                    todoLabel:\n                                    {\n                                        bind:       \"todo\",\n                                        ondblclick:\n                                        function()\n                                        {\n                                            this.data.beginTransaction();\n                                            this.parent.addClass(\"editing\");\n                                            this.parent.controls.editTodoTextbox.focus().select();\n                                        } \n                                    },\n                                    deleteTodoButton:\n                                    {\n                                        onclick:\n                                        function()\n                                        {\n                                            this.root.on.deleteTodo(this.data().id);\n                                        }\n                                    },\n                                    editTodoTextbox:\n                                    {\n                                        bind:       { value: { to: \"todo\", updateon: [\"change\", \"keyup\"] } },\n                                        onenter:\n                                        function()\n                                        {\n                                            this.value(this.value().trim());\n                                            this.data.commit();\n                                            if (this.value() == \"\") this.root.on.deleteTodo(this.data().id);\n                                            else                    this.root.on.saveTodo(this.data());\n                                            this.parent.removeClass(\"editing\");\n                                        },\n                                        onescape:\n                                        function()\n                                        {\n                                            this.data.rollback();\n                                            this.parent.removeClass(\"editing\");\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                bind:           { display: \"length\" },\n                onunbind:       function(data) { this.hide(); }\n            },\n            todosFooter:\n            {\n                controls:\n                {\n                    todosCountLabel:        { bind: function(todos){return getActiveTodos(todos()).length;} },\n                    todosCountDescription:  { bind: function(todos){return getActiveTodos(todos()).length == 1 ? \" item left\" : \" items left\";} },\n                    allTodosLink:           { onclick: function(){this.root.attributes({filter: \"none\"});} },\n                    activeTodosLink:        { onclick: function(){this.root.attributes({filter: \"active\"});} },\n                    completedTodosLink:     { onclick: function(){this.root.attributes({filter: \"completed\"});} },\n                    deleteCompletedTodos:   { onclick: function(){this.root.on.deleteCompletedTodos();} },\n                },\n                bind:       { display: \"length\" }\n            }\n        },\n        events:[\"addNewTodo\", \"deleteTodo\", \"saveTodo\", \"toggleAllCompleted\", \"deleteCompletedTodos\"]\n    };\n    return adapterDefinition;\n}});}();\n!function()\n{\n    root.define\n    (\n        \"todoMVC.appProxy\",\n        function todoMVCAppProtoProxy(localStorage, removeFromArray)\n        {\n            var storageKey  = \"todoMVC.todos\";\n            function getTodos() { return JSON.parse((localStorage.getItem(storageKey)||\"{\\\"currentId\\\":0, \\\"items\\\":[]}\")); }\n            function setTodos(todos) { localStorage.setItem(storageKey, JSON.stringify(todos)); }\n            function getTodo(todoId, todos)\n            {\n                for(var itemCounter=0;itemCounter<todos.items.length;itemCounter++)\n                if (todos.items[itemCounter].id == todoId) return todos.items[itemCounter];\n            }\n            function setTodo(todo, todos)\n            {\n                for(var itemCounter=0;itemCounter<todos.items.length;itemCounter++)\n                if (todos.items[itemCounter].id == todo.id)\n                {\n                    todos.items[itemCounter] = todo;\n                    return;\n                }\n                todos.items.push(todo);\n            }\n            function removeTodo(todoId)\n            {\n                var todos   = getTodos();\n                for(var itemCounter=0;itemCounter<todos.items.length;itemCounter++)\n                if (todos.items[itemCounter].id == todoId)\n                {\n                    removeFromArray(todos.items, itemCounter);\n                    break;\n                }\n                return todos;\n            }\n     return {\n                getTodos:\n                function(callback)\n                {\n                    callback(getTodos().items);\n                },\n                addTodo:\n                function(todo, callback)\n                {\n                    var todos   = getTodos();\n                    todo.id     = todos.currentId++;\n                    todos.items.push(todo);\n                    setTodos(todos);\n                    callback(todos.items);\n                },\n                completeTodo:\n                function(todoId, callback)\n                {\n                    var todos   = getTodos();\n                    var todo    = getTodo(todoId, todos);\n                    todo.completed  = true;\n                    setTodo(todo, todos);\n                    setTodos(todos);\n                    callback(todos.items);\n                },\n                deleteCompletedTodos:\n                function(callback)\n                {\n                    var todos   = getTodos();\n                    for(var itemCounter=todos.items.length-1;itemCounter>=0;itemCounter--)\n                    if (todos.items[itemCounter].completed === true)    removeFromArray(todos.items, itemCounter);\n                    setTodos(todos);\n                    callback(todos.items);\n                },\n                deleteTodo:\n                function(todoId, callback)\n                {\n                    var todos   = removeTodo(todoId);\n                    setTodos(todos);\n                    callback(todos.items);\n                },\n                saveTodo:\n                function(todo, callback)\n                {\n                    var todos   = getTodos();\n                    setTodo(todo, todos);\n                    setTodos(todos);\n                    callback(todos.items);\n                },\n                saveTodos:\n                function(todosToSave, callback)\n                {\n                    var storedTodos = getTodos();\n                    for(var todoCounter=0;todoCounter<todosToSave.length;todoCounter++) setTodo(todosToSave[todoCounter], storedTodos);\n                    setTodos(storedTodos);\n                    callback(storedTodos.items);\n                },\n                toggleAllTodos:\n                function(value, callback)\n                {\n                    var todos   = getTodos();\n                    for(var todoCounter=0;todoCounter<todos.items.length;todoCounter++)   todos.items[todoCounter].completed  = value;;\n                    setTodos(todos);\n                    callback(todos.items);\n                }\n            };\n        }\n    );\n}();\n!function()\n{\n    root.define\n    (\n        \"todoMVC.appController\",\n        function todoMVCAppController(appView, appProxy, observer)\n        {\n            function rebindTodoList(todos)\n            {\n                // Replace the array directly wrapped in the observer bound to the appView with the new array argument passed in the todos parameter\n                appView.data(\"\", todos);\n            }\n            appView.on.addNewTodo.listen\n            (function(value)\n            {\n                appProxy.addTodo({todo: value}, rebindTodoList);\n            });\n            appView.on.deleteTodo.listen\n            (function(todoId)\n            {\n                appProxy.deleteTodo(todoId, rebindTodoList);\n            });\n            appView.on.saveTodo.listen\n            (function(todo)\n            {\n                appProxy.saveTodo(todo, rebindTodoList);\n            });\n            appView.on.toggleAllCompleted.listen\n            (function(flag)\n            {\n                appProxy.toggleAllTodos(flag, rebindTodoList);\n            });\n            appView.on.deleteCompletedTodos.listen\n            (function()\n            {\n                appProxy.deleteCompletedTodos(rebindTodoList);\n            });\n            this.launch =\n            function()\n            {\n                appView.data = new observer([]);\n                appProxy.getTodos(rebindTodoList);\n            }\n        }\n    );\n}();\n!function()\n{\n    window.onload   =\n    function ComposeApp()\n    {\n        var atomic  = root.atomic.html.compositionRoot();\n        var app =\n        new root.todoMVC.appController\n        (\n            atomic.viewAdapterFactory.createView\n            (\n                new root.todoMVC.appView(), \n                document.querySelector(\"#todoMVCApp\")\n            ),\n            new root.todoMVC.appProxy(window.localStorage, root.utilities.removeFromArray),\n            atomic.observer\n        );\n        app.launch();\n    };\n}();",
                        css:            "hr {\n\tmargin: 20px 0;\n\tborder: 0;\n\tborder-top: 1px dashed #c5c5c5;\n\tborder-bottom: 1px dashed #f7f7f7;\n}\n\n.learn a {\n\tfont-weight: normal;\n\ttext-decoration: none;\n\tcolor: #b83f45;\n}\n\n.learn a:hover {\n\ttext-decoration: underline;\n\tcolor: #787e7e;\n}\n\n.learn h3,\n.learn h4,\n.learn h5 {\n\tmargin: 10px 0;\n\tfont-weight: 500;\n\tline-height: 1.2;\n\tcolor: #000;\n}\n\n.learn h3 {\n\tfont-size: 24px;\n}\n\n.learn h4 {\n\tfont-size: 18px;\n}\n\n.learn h5 {\n\tmargin-bottom: 0;\n\tfont-size: 14px;\n}\n\n.learn ul {\n\tpadding: 0;\n\tmargin: 0 0 30px 25px;\n}\n\n.learn li {\n\tline-height: 20px;\n}\n\n.learn p {\n\tfont-size: 15px;\n\tfont-weight: 300;\n\tline-height: 1.3;\n\tmargin-top: 0;\n\tmargin-bottom: 0;\n}\n\n#issue-count {\n\tdisplay: none;\n}\n\n.quote {\n\tborder: none;\n\tmargin: 20px 0 60px 0;\n}\n\n.quote p {\n\tfont-style: italic;\n}\n\n.quote p:before {\n\tcontent: '“';\n\tfont-size: 50px;\n\topacity: .15;\n\tposition: absolute;\n\ttop: -20px;\n\tleft: 3px;\n}\n\n.quote p:after {\n\tcontent: '”';\n\tfont-size: 50px;\n\topacity: .15;\n\tposition: absolute;\n\tbottom: -42px;\n\tright: 3px;\n}\n\n.quote footer {\n\tposition: absolute;\n\tbottom: -40px;\n\tright: 0;\n}\n\n.quote footer img {\n\tborder-radius: 3px;\n}\n\n.quote footer a {\n\tmargin-left: 5px;\n\tvertical-align: middle;\n}\n\n.speech-bubble {\n\tposition: relative;\n\tpadding: 10px;\n\tbackground: rgba(0, 0, 0, .04);\n\tborder-radius: 5px;\n}\n\n.speech-bubble:after {\n\tcontent: '';\n\tposition: absolute;\n\ttop: 100%;\n\tright: 30px;\n\tborder: 13px solid transparent;\n\tborder-top-color: rgba(0, 0, 0, .04);\n}\n\n.learn-bar > .learn {\n\tposition: absolute;\n\twidth: 272px;\n\ttop: 8px;\n\tleft: -300px;\n\tpadding: 10px;\n\tborder-radius: 5px;\n\tbackground-color: rgba(255, 255, 255, .6);\n\ttransition-property: left;\n\ttransition-duration: 500ms;\n}\n\n@media (min-width: 899px) {\n\t.learn-bar {\n\t\twidth: auto;\n\t\tpadding-left: 300px;\n\t}\n\n\t.learn-bar > .learn {\n\t\tleft: 8px;\n\t}\n}\nhtml,\nbody {\n\tmargin: 0;\n\tpadding: 0;\n}\n\nbutton {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tbackground: none;\n\tfont-size: 100%;\n\tvertical-align: baseline;\n\tfont-family: inherit;\n\tfont-weight: inherit;\n\tcolor: inherit;\n\t-webkit-appearance: none;\n\tappearance: none;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-font-smoothing: antialiased;\n\tfont-smoothing: antialiased;\n}\n\nbody {\n\tfont: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;\n\tline-height: 1.4em;\n\tbackground: #f5f5f5;\n\tcolor: #4d4d4d;\n\tmin-width: 230px;\n\tmax-width: 550px;\n\tmargin: 0 auto;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-font-smoothing: antialiased;\n\tfont-smoothing: antialiased;\n\tfont-weight: 300;\n}\n\nbutton,\ninput[type=\"checkbox\"] {\n\toutline: none;\n}\n\n.hidden {\n\tdisplay: none;\n}\n\n.todoapp {\n\tbackground: #fff;\n\tmargin: 130px 0 40px 0;\n\tposition: relative;\n\tbox-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2),\n\t            0 25px 50px 0 rgba(0, 0, 0, 0.1);\n}\n\n.todoapp input::-webkit-input-placeholder {\n\tfont-style: italic;\n\tfont-weight: 300;\n\tcolor: #e6e6e6;\n}\n\n.todoapp input::-moz-placeholder {\n\tfont-style: italic;\n\tfont-weight: 300;\n\tcolor: #e6e6e6;\n}\n\n.todoapp input::input-placeholder {\n\tfont-style: italic;\n\tfont-weight: 300;\n\tcolor: #e6e6e6;\n}\n\n.todoapp h1 {\n\tposition: absolute;\n\ttop: -155px;\n\twidth: 100%;\n\tfont-size: 100px;\n\tfont-weight: 100;\n\ttext-align: center;\n\tcolor: rgba(175, 47, 47, 0.15);\n\t-webkit-text-rendering: optimizeLegibility;\n\t-moz-text-rendering: optimizeLegibility;\n\ttext-rendering: optimizeLegibility;\n}\n\n.new-todo,\n.edit {\n\tposition: relative;\n\tmargin: 0;\n\twidth: 100%;\n\tfont-size: 24px;\n\tfont-family: inherit;\n\tfont-weight: inherit;\n\tline-height: 1.4em;\n\tborder: 0;\n\toutline: none;\n\tcolor: inherit;\n\tpadding: 6px;\n\tborder: 1px solid #999;\n\tbox-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);\n\tbox-sizing: border-box;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-font-smoothing: antialiased;\n\tfont-smoothing: antialiased;\n}\n\n.new-todo {\n\tpadding: 16px 16px 16px 60px;\n\tborder: none;\n\tbackground: rgba(0, 0, 0, 0.003);\n\tbox-shadow: inset 0 -2px 1px rgba(0,0,0,0.03);\n}\n\n.main {\n\tposition: relative;\n\tz-index: 2;\n\tborder-top: 1px solid #e6e6e6;\n}\n\nlabel[for='toggle-all'] {\n\tdisplay: none;\n}\n\n.toggle-all {\n\tposition: absolute;\n\ttop: -55px;\n\tleft: -12px;\n\twidth: 60px;\n\theight: 34px;\n\ttext-align: center;\n\tborder: none; /* Mobile Safari */\n}\n\n.toggle-all:before {\n\tcontent: '❯';\n\tfont-size: 22px;\n\tcolor: #e6e6e6;\n\tpadding: 10px 27px 10px 27px;\n}\n\n.toggle-all:checked:before {\n\tcolor: #737373;\n}\n\n.todo-list {\n\tmargin: 0;\n\tpadding: 0;\n\tlist-style: none;\n}\n\n.todo-list li {\n\tposition: relative;\n\tfont-size: 24px;\n\tborder-bottom: 1px solid #ededed;\n}\n\n.todo-list li:last-child {\n\tborder-bottom: none;\n}\n\n.todo-list li.editing {\n\tborder-bottom: none;\n\tpadding: 0;\n}\n\n.todo-list li.editing .edit {\n\tdisplay: block;\n\twidth: 506px;\n\tpadding: 13px 17px 12px 17px;\n\tmargin: 0 0 0 43px;\n}\n\n.todo-list li.editing .view {\n\tdisplay: none;\n}\n\n.todo-list li .toggle {\n\ttext-align: center;\n\twidth: 40px;\n\t/* auto, since non-WebKit browsers doesn't support input styling */\n\theight: auto;\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\tmargin: auto 0;\n\tborder: none; /* Mobile Safari */\n\t-webkit-appearance: none;\n\tappearance: none;\n}\n\n.todo-list li .toggle:after {\n\tcontent: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"-10 -18 100 135\"><circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"none\" stroke=\"#ededed\" stroke-width=\"3\"/></svg>');\n}\n\n.todo-list li .toggle:checked:after {\n\tcontent: url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" viewBox=\"-10 -18 100 135\"><circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"none\" stroke=\"#bddad5\" stroke-width=\"3\"/><path fill=\"#5dc2af\" d=\"M72 25L42 71 27 56l-4 4 20 20 34-52z\"/></svg>');\n}\n\n.todo-list li label {\n\twhite-space: pre;\n\tword-break: break-word;\n\tpadding: 15px 60px 15px 15px;\n\tmargin-left: 45px;\n\tdisplay: block;\n\tline-height: 1.2;\n\ttransition: color 0.4s;\n}\n\n.todo-list li.completed label {\n\tcolor: #d9d9d9;\n\ttext-decoration: line-through;\n}\n\n.todo-list li .destroy {\n\tdisplay: none;\n\tposition: absolute;\n\ttop: 0;\n\tright: 10px;\n\tbottom: 0;\n\twidth: 40px;\n\theight: 40px;\n\tmargin: auto 0;\n\tfont-size: 30px;\n\tcolor: #cc9a9a;\n\tmargin-bottom: 11px;\n\ttransition: color 0.2s ease-out;\n}\n\n.todo-list li .destroy:hover {\n\tcolor: #af5b5e;\n}\n\n.todo-list li .destroy:after {\n\tcontent: '×';\n}\n\n.todo-list li:hover .destroy {\n\tdisplay: block;\n}\n\n.todo-list li .edit {\n\tdisplay: none;\n}\n\n.todo-list li.editing:last-child {\n\tmargin-bottom: -1px;\n}\n\n.footer {\n\tcolor: #777;\n\tpadding: 10px 15px;\n\theight: 40px;\n\ttext-align: center;\n\tborder-top: 1px solid #e6e6e6;\n}\n\n.footer:before {\n\tcontent: '';\n\tposition: absolute;\n\tright: 0;\n\tbottom: 0;\n\tleft: 0;\n\theight: 50px;\n\toverflow: hidden;\n\tbox-shadow: 0 1px 1px rgba(0, 0, 0, 0.2),\n\t            0 8px 0 -3px #f6f6f6,\n\t            0 9px 1px -3px rgba(0, 0, 0, 0.2),\n\t            0 16px 0 -6px #f6f6f6,\n\t            0 17px 2px -6px rgba(0, 0, 0, 0.2);\n}\n\n.todo-count {\n\tfloat: left;\n\ttext-align: left;\n}\n\n.todo-count strong {\n\tfont-weight: 300;\n}\n\n.filters {\n\tmargin: 0;\n\tpadding: 0;\n\tlist-style: none;\n\tposition: absolute;\n\tright: 0;\n\tleft: 0;\n}\n\n.filters li {\n\tdisplay: inline;\n}\n\n.filters li a {\n\tcolor: inherit;\n\tmargin: 3px;\n\tpadding: 3px 7px;\n\ttext-decoration: none;\n\tborder: 1px solid transparent;\n\tborder-radius: 3px;\n}\n\n.filters li a.selected,\n.filters li a:hover {\n\tborder-color: rgba(175, 47, 47, 0.1);\n}\n\n.filters li a.selected {\n\tborder-color: rgba(175, 47, 47, 0.2);\n}\n\n.clear-completed,\nhtml .clear-completed:active {\n\tfloat: right;\n\tposition: relative;\n\tline-height: 20px;\n\ttext-decoration: none;\n\tcursor: pointer;\n\tposition: relative;\n}\n\n.clear-completed:hover {\n\ttext-decoration: underline;\n}\n\n.info {\n\tmargin: 65px auto 0;\n\tcolor: #bfbfbf;\n\tfont-size: 10px;\n\ttext-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);\n\ttext-align: center;\n}\n\n.info p {\n\tline-height: 1;\n}\n\n.info a {\n\tcolor: inherit;\n\ttext-decoration: none;\n\tfont-weight: 400;\n}\n\n.info a:hover {\n\ttext-decoration: underline;\n}\n\n/*\n\tHack to remove background from Mobile Safari.\n\tCan't use it globally since it destroys checkboxes in Firefox\n*/\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n\t.toggle-all,\n\t.todo-list li .toggle {\n\t\tbackground: none;\n\t}\n\n\t.todo-list li .toggle {\n\t\theight: 40px;\n\t}\n\n\t.toggle-all {\n\t\t-webkit-transform: rotate(90deg);\n\t\ttransform: rotate(90deg);\n\t\t-webkit-appearance: none;\n\t\tappearance: none;\n\t}\n}\n\n@media (max-width: 430px) {\n\t.footer {\n\t\theight: 50px;\n\t}\n\n\t.filters {\n\t\tbottom: 10px;\n\t}\n}\n.todoapp[data-filter=\"active\"] .todo-list li.completed { display: none; }\n.todoapp[data-filter=\"completed\"] .todo-list li { display: none; }\n.todoapp[data-filter=\"completed\"] .todo-list li.completed { display: block; }\n\n.todoapp[data-filter=\"none\"] footer.footer a.nofilter { border-color: rgba(175, 47, 47, 0.2); }\n.todoapp[data-filter=\"active\"] footer.footer a.activeonly { border-color: rgba(175, 47, 47, 0.2); }\n.todoapp[data-filter=\"completed\"] footer.footer a.completedonly { border-color: rgba(175, 47, 47, 0.2); }\n.footer { display: block; }\n",
                        html:           "    <section    id=\"todoMVCApp\" class=\"todoapp\">\n        <header class=\"header\">\n            <h1>todos</h1>\n            <input id=\"newTodoTextbox\" class=\"new-todo\" placeholder=\"What needs to be done?\" autofocus>\n        </header>\n        <!-- This section should be hidden by default and shown when there are todos -->\n        <section    id=\"todosView\" class=\"main\">\n            <input  id=\"toggleAllCompleted\" class=\"toggle-all\" type=\"checkbox\">\n            <label for=\"toggle-all\">Mark all as complete</label>\n            <ul     id=\"todoList\" class=\"todo-list\">\n                <!-- These are here just to show the structure of the list items -->\n                <!-- List items should get the class `editing` when editing and `completed` when marked as completed -->\n                <li id=\"todoListItemTemplate\" class=\"completed\">\n                    <div class=\"view\">\n                        <input  id=\"toggleCompletedCheckbox\" class=\"toggle\" type=\"checkbox\">\n                        <label  id=\"todoLabel\">Taste JavaScript</label>\n                        <button id=\"deleteTodoButton\" class=\"destroy\"></button>\n                    </div>\n                    <input  id=\"editTodoTextbox\" class=\"edit\" value=\"Create a TodoMVC template\">\n                </li>\n                <li>\n                    <div class=\"view\">\n                        <input class=\"toggle\" type=\"checkbox\">\n                        <label>Buy a unicorn</label>\n                        <button class=\"destroy\"></button>\n                    </div>\n                    <input class=\"edit\" value=\"Rule the web\">\n                </li>\n            </ul>\n        </section>\n        <!-- This footer should hidden by default and shown when there are todos -->\n        <footer id=\"todosFooter\" class=\"footer\">\n            <!-- This should be `0 items left` by default -->\n            <span class=\"todo-count\"><strong><span  id=\"todosCountLabel\">0</span></strong><span id=\"todosCountDescription\"> item left</span></span>\n            <!-- Remove this if you don't implement routing -->\n            <ul class=\"filters\">\n                <li>\n                    <a id=\"allTodosLink\" class=\"nofilter\" href=\"#/\">All</a>\n                </li>\n                <li>\n                    <a id=\"activeTodosLink\" class=\"activeonly\" href=\"#/active\">Active</a>\n                </li>\n                <li>\n                    <a id=\"completedTodosLink\" class=\"completedonly\" href=\"#/completed\">Completed</a>\n                </li>\n            </ul>\n            <!-- Hidden if no completed items are left ↓ -->\n            <button id=\"deleteCompletedTodos\" class=\"clear-completed\">Clear completed</button>\n        </footer>\n    </section>\n    <footer class=\"info\">\n        <p>Double-click to edit a todo</p>\n        <!-- Change this out with your name and url ↓ -->\n        <p>Created by <a href=\"http://github.com/tyreejackson\">Tyree Jackson</a></p>\n        <p>Part of <a href=\"http://todomvc.com\">TodoMVC</a></p>\n    </footer>\n"

                    }
                }
            ]
        };
        return data;
    }

    return methods;
});}();